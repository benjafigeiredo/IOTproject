"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withLocationsAndRooms = exports.withLocations = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
async function buildLocationNamesById(client) {
    const locations = await client.locations.list();
    return new Map(locations.map(location => [location.locationId, location.name]));
}
function withLocation(item, locationNameById) {
    var _a;
    return { ...item, location: item.locationId ? (_a = locationNameById.get(item.locationId)) !== null && _a !== void 0 ? _a : '<invalid locationId>' : '' };
}
async function withLocations(client, list) {
    const locationNameById = await buildLocationNamesById(client);
    return list.map(item => withLocation(item, locationNameById));
}
exports.withLocations = withLocations;
function notEmpty(value) {
    return value !== null && value !== undefined;
}
function uniqueLocationIds(from) {
    // Note -- the `.filter(notEmpty))` is here because the source types such
    // as InstalledApp are currently defined with optional locationId even
    // though locationId is actually always set. The filter can be removed
    // once that issue is corrected.
    return lodash_1.default.uniq(from.map(it => it.locationId).filter(notEmpty));
}
async function withLocationsAndRooms(client, list) {
    const locationNameById = await buildLocationNamesById(client);
    const locationIds = uniqueLocationIds(list);
    const roomNamesById = new Map((await Promise.all(locationIds.map((locationId) => {
        return client.rooms.list(locationId);
    }))).flat().map(room => { var _a, _b; return [(_a = room.roomId) !== null && _a !== void 0 ? _a : '', (_b = room.name) !== null && _b !== void 0 ? _b : '']; }));
    return list.map(item => {
        var _a, _b;
        let location = '';
        let room = '';
        if (item.locationId) {
            location = (_a = locationNameById.get(item.locationId)) !== null && _a !== void 0 ? _a : '';
            if (item.roomId) {
                room = (_b = roomNamesById.get(item.roomId)) !== null && _b !== void 0 ? _b : '';
            }
        }
        return { ...item, location, room };
    });
}
exports.withLocationsAndRooms = withLocationsAndRooms;
