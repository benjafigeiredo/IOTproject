"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cliConfig = exports.CLIConfig = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
class CLIConfig {
    constructor() {
        this._configFile = null;
        this._config = null;
    }
    init(configFile) {
        this._configFile = configFile;
    }
    get configFile() {
        return this._configFile;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    loadConfig() {
        if (this._configFile == null) {
            throw new Error('config not yet initialized');
        }
        if (!fs_1.default.existsSync(this._configFile)) {
            this._config = {};
        }
        if (this._config == null) {
            const parsed = js_yaml_1.default.safeLoad(fs_1.default.readFileSync(`${this._configFile}`, 'utf-8'));
            if (parsed) {
                if (typeof parsed === 'object') {
                    this._config = { ...parsed };
                }
                else {
                    throw new Error('invalid config file format; please specify zero or more profiles');
                }
            }
        }
        if (!this._config) {
            // empty file; use empty map
            this._config = {};
        }
        return this._config;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getRawConfigData() {
        if (!this._config) {
            throw new Error('config not initialized completely');
        }
        return this._config;
    }
    getProfile(name) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const config = this.loadConfig();
        if (!(name in config)) {
            return {};
        }
        const retVal = config[name];
        if (retVal === null) {
            throw new Error('null profile specified. Check config.yaml for errors.');
        }
        if (typeof retVal === 'object') {
            return retVal;
        }
        throw new Error(`bad profile configuration for ${name} in ${this._configFile}`);
    }
}
exports.CLIConfig = CLIConfig;
/* eslint-disable @typescript-eslint/no-explicit-any */
if (!('_cliConfig' in global)) {
    global._cliConfig = new CLIConfig();
}
exports.cliConfig = global._cliConfig;
/* eslint-enable @typescript-eslint/no-explicit-any */
