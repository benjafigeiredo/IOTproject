"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelsUnassignCommand = exports.chooseAssignedDriver = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const edge_command_1 = require("../../../lib/edge-command");
const channels_1 = require("../channels");
async function chooseAssignedDriver(command, promptMessage, channelId, commandLineDriverId, options) {
    const opts = cli_lib_1.chooseOptionsWithDefaults(options);
    const config = {
        itemName: 'driver',
        primaryKeyName: 'driverId',
        sortKeyName: 'name',
    };
    const listDrivers = async () => {
        const driverDetails = await command.edgeClient.channels.listAssignedDrivers(channelId);
        return (await Promise.all(driverDetails.map(async (details) => {
            var _a;
            try {
                const driver = await command.edgeClient.drivers.get(details.driverId);
                return { ...details, name: driver.name };
            }
            catch (error) {
                if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                    return { ...details, name: '<deleted driver>' };
                }
                throw error;
            }
        })));
    };
    const preselectedId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, commandLineDriverId, listDrivers)
        : commandLineDriverId;
    return cli_lib_1.selectFromList(command, config, preselectedId, listDrivers, promptMessage);
}
exports.chooseAssignedDriver = chooseAssignedDriver;
class ChannelsUnassignCommand extends edge_command_1.EdgeCommand {
    async run() {
        const { args, argv, flags } = this.parse(ChannelsUnassignCommand);
        await super.setup(args, argv, flags);
        const channelId = await channels_1.chooseChannel(this, 'Select a channel for the driver.', flags.channel);
        const driverId = await chooseAssignedDriver(this, 'Select a driver to remove from channel.', channelId, args.driverId);
        await this.edgeClient.channels.unassignDriver(channelId, driverId);
        this.log(`${driverId} removed from channel ${channelId}`);
    }
}
exports.ChannelsUnassignCommand = ChannelsUnassignCommand;
ChannelsUnassignCommand.description = 'remove a driver from a channel';
ChannelsUnassignCommand.flags = {
    ...edge_command_1.EdgeCommand.flags,
    'channel': command_1.flags.string({
        char: 'C',
        description: 'channel id',
    }),
};
ChannelsUnassignCommand.args = [
    {
        name: 'driverId',
        description: 'driver id',
    },
];
ChannelsUnassignCommand.aliases = ['edge:drivers:unpublish'];
