"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DriversInstallCommand = exports.chooseHub = void 0;
const command_1 = require("@oclif/command");
const core_sdk_1 = require("@smartthings/core-sdk");
const cli_lib_1 = require("@smartthings/cli-lib");
const edge_command_1 = require("../../../lib/edge-command");
async function chooseHub(command, promptMessage, commandLineHubId, options) {
    const opts = cli_lib_1.chooseOptionsWithDefaults(options);
    const config = {
        itemName: 'hub',
        primaryKeyName: 'deviceId',
        sortKeyName: 'name',
        listTableFieldDefinitions: ['label', 'name', 'deviceId'],
    };
    const listDrivers = () => command.client.devices.list({ capability: 'bridge', type: core_sdk_1.DeviceIntegrationType.HUB });
    const preselectedId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, commandLineHubId, listDrivers)
        : commandLineHubId;
    return cli_lib_1.selectFromList(command, config, preselectedId, listDrivers, promptMessage);
}
exports.chooseHub = chooseHub;
class DriversInstallCommand extends edge_command_1.EdgeCommand {
    async chooseChannelFromEnrollments(hubId) {
        const config = {
            itemName: 'hub-enrolled channel',
            primaryKeyName: 'channelId',
            sortKeyName: 'name',
        };
        const listChannels = () => this.edgeClient.hubs.enrolledChannels(hubId);
        return cli_lib_1.selectFromList(this, config, undefined, listChannels, 'Select a channel to install the driver from.');
    }
    async chooseDriverFromChannel(channelId, preselectedDriverId) {
        const config = {
            itemName: 'driver',
            primaryKeyName: 'driverId',
            sortKeyName: 'name',
        };
        const listDrivers = async () => {
            const drivers = await this.edgeClient.channels.listAssignedDrivers(channelId);
            return (await Promise.all(drivers.map(async (driver) => {
                var _a;
                try {
                    const driverInfo = await this.edgeClient.channels.getDriverChannelMetaInfo(channelId, driver.driverId);
                    return {
                        driverId: driver.driverId,
                        name: driverInfo.name,
                    };
                }
                catch (error) {
                    // There is currently a bug in the API that causes `listAssignedDrivers`
                    // to return drivers that were deleted but not removed from the channel.
                    // We can tell they have been deleted because we get a 404 on the call
                    // to `getRevision`, so we'll just skip them until the API is fixed.
                    if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                        return undefined;
                    }
                    throw error;
                }
            }))).filter((driver) => !!driver);
        };
        return cli_lib_1.selectFromList(this, config, preselectedDriverId, listDrivers, 'Select a driver to install.');
    }
    async run() {
        var _a;
        const { args, argv, flags } = this.parse(DriversInstallCommand);
        await super.setup(args, argv, flags);
        const hubId = await chooseHub(this, 'Select a hub to install to.', flags.hub);
        const channelId = (_a = flags.channel) !== null && _a !== void 0 ? _a : await this.chooseChannelFromEnrollments(hubId);
        const driverId = await this.chooseDriverFromChannel(channelId, args.driverId);
        await this.edgeClient.hubs.installDriver(driverId, hubId, channelId);
        this.log(`driver ${driverId} installed to hub ${hubId}`);
    }
}
exports.DriversInstallCommand = DriversInstallCommand;
DriversInstallCommand.description = 'install an edge driver onto a hub';
DriversInstallCommand.examples = [
    'smartthings edge:drivers:install                                         # use Q&A format to enter required values',
    'smartthings edge:drivers:install -H <hub-id>                             # specify the hub on the command line, other fields will be asked for',
    'smartthings edge:drivers:install -H <hub-id> -C <channel-id> <driver-id> # install a driver from a channel on an enrolled hub',
];
DriversInstallCommand.flags = {
    ...edge_command_1.EdgeCommand.flags,
    hub: command_1.flags.string({
        char: 'H',
        description: 'hub id',
    }),
    channel: command_1.flags.string({
        char: 'C',
        description: 'channel id',
    }),
};
DriversInstallCommand.args = [{
        name: 'driverId',
        description: 'id of driver to install',
    }];
