"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseRoom = exports.getRoomsByLocation = exports.tableFieldDefinitions = void 0;
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const cli_lib_1 = require("@smartthings/cli-lib");
exports.tableFieldDefinitions = ['name', 'locationId', 'roomId'];
async function getRoomsByLocation(client, locationId) {
    let locations = [];
    if (locationId) {
        locations = [await client.locations.get(locationId)];
    }
    else {
        locations = await client.locations.list();
    }
    if (!locations || locations.length == 0) {
        throw new errors_1.CLIError('could not find any locations for your account. Perhaps ' +
            "you haven't created any locations yet.");
    }
    let rooms = [];
    for (const location of locations) {
        const locationRooms = await client.rooms.list(location.locationId);
        rooms = rooms.concat(locationRooms.map(room => { return { ...room, locationName: location.name }; }));
    }
    return rooms;
}
exports.getRoomsByLocation = getRoomsByLocation;
async function chooseRoom(command, locationId, deviceFromArg) {
    const rooms = await getRoomsByLocation(command.client, locationId);
    const config = {
        itemName: 'room',
        primaryKeyName: 'roomId',
        sortKeyName: 'name',
        listTableFieldDefinitions: exports.tableFieldDefinitions,
    };
    const roomId = await cli_lib_1.selectFromList(command, config, deviceFromArg, async () => rooms);
    const room = rooms.find(room => room.roomId === roomId);
    if (!room) {
        throw new errors_1.CLIError(`could not find room with id ${roomId}`);
    }
    if (!room.locationId) {
        throw new errors_1.CLIError(`could not determine location id for room ${roomId}`);
    }
    return [roomId, room.locationId];
}
exports.chooseRoom = chooseRoom;
class RoomsCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(RoomsCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'roomId',
            sortKeyName: 'name',
            listTableFieldDefinitions: exports.tableFieldDefinitions,
            tableFieldDefinitions: exports.tableFieldDefinitions,
        };
        const rooms = await getRoomsByLocation(this.client, flags['location-id']);
        await cli_lib_1.outputListing(this, config, args.idOrIndex, async () => rooms, async (id) => {
            const room = rooms.find(room => room.roomId === id);
            if (!room) {
                throw Error(`could not find room with id ${id}`);
            }
            return this.client.rooms.get(id, room.locationId);
        });
    }
}
exports.default = RoomsCommand;
RoomsCommand.description = 'list rooms or get information for a specific room';
RoomsCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'a specific location to query',
    }),
    ...cli_lib_1.outputListing.flags,
};
RoomsCommand.args = [{
        name: 'idOrIndex',
        description: 'room UUID or index',
    }];
RoomsCommand.aliases = ['rooms'];
