"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const device_config_1 = require("../device-config");
class GeneratePresentationCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(GeneratePresentationCommand);
        await super.setup(args, argv, flags);
        const extraParams = {};
        if (flags.dth) {
            extraParams.typeIntegration = 'dth';
            if (args['type-shard-id']) {
                extraParams.typeShareId = args['type-shard-id'];
            }
        }
        this.logger.debug(`extraParams = ${JSON.stringify(extraParams)}`);
        const config = {
            buildTableOutput: (data) => device_config_1.buildTableOutput(this.tableGenerator, data),
        };
        await cli_lib_1.outputItem(this, config, () => this.client.presentation.generate(args.id, extraParams));
    }
}
exports.default = GeneratePresentationCommand;
GeneratePresentationCommand.description = 'generate the default device configuration';
GeneratePresentationCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputItem.flags,
    dth: command_1.flags.boolean({
        description: 'generate from legacy DTH id instead of a profile id',
    }),
    'type-shard-id': command_1.flags.string({
        description: 'data management shard Id where the device type resides, ' +
            'only useful for legacy DTH type integrations',
    }),
};
GeneratePresentationCommand.args = [{
        name: 'id',
        description: 'the profile id (or legacy DTH id))',
        required: true,
    }];
