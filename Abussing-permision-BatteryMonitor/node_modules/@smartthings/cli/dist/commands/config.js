"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigItem = void 0;
const tslib_1 = require("tslib");
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
function reservedKey(key) {
    return key === 'logging';
}
class ConfigItem {
    constructor(key, data, profileName) {
        var _a, _b, _c;
        this.name = key;
        this.active = reservedKey(key) ? 'N/A' : key === profileName ? 'true' : '';
        this.token = (_a = data === null || data === void 0 ? void 0 : data.token) !== null && _a !== void 0 ? _a : '';
        this.apiUrl = (_c = (_b = data === null || data === void 0 ? void 0 : data.clientIdProvider) === null || _b === void 0 ? void 0 : _b.baseURL) !== null && _c !== void 0 ? _c : '';
        this.data = data;
    }
}
exports.ConfigItem = ConfigItem;
class ConfigCommand extends cli_lib_1.SmartThingsCommand {
    async run() {
        const { args, argv, flags } = this.parse(ConfigCommand);
        await super.setup(args, argv, flags);
        const listTableFieldDefinitions = [
            'name',
            { label: 'Active', value: (item) => reservedKey(item.name) ? 'N/A' : item.active ? 'true' : '' },
        ];
        const tableFieldDefinitions = [
            ...listTableFieldDefinitions,
            { label: 'Definition', value: (item) => js_yaml_1.default.safeDump(item.data) },
        ];
        const outputListConfig = {
            primaryKeyName: 'name',
            sortKeyName: 'name',
            listTableFieldDefinitions,
        };
        if (this.flags.verbose) {
            outputListConfig.listTableFieldDefinitions.push('token');
        }
        const getConfig = async (name) => {
            const config = cli_lib_1.cliConfig.getRawConfigData();
            return new ConfigItem(name, config[name], this.profileName);
        };
        const listConfigs = async () => {
            const config = cli_lib_1.cliConfig.getRawConfigData();
            const list = Object.keys(config).map(it => {
                return new ConfigItem(it, config[it], this.profileName);
            });
            if (this.flags.verbose && !!list.find(it => { var _a, _b; return (_b = (_a = it.data) === null || _a === void 0 ? void 0 : _a.clientIdProvider) === null || _b === void 0 ? void 0 : _b.baseURL; })) {
                listTableFieldDefinitions.push('apiUrl');
            }
            return list;
        };
        if (args.name) {
            const id = await cli_lib_1.stringTranslateToId(outputListConfig, args.name, listConfigs);
            await cli_lib_1.outputItem(this, { tableFieldDefinitions }, () => getConfig(id));
        }
        else {
            const outputFormat = cli_lib_1.calculateOutputFormat(this);
            if (outputFormat === cli_lib_1.IOFormat.COMMON) {
                await cli_lib_1.outputList(this, outputListConfig, listConfigs, true);
            }
            else {
                const outputFormatter = cli_lib_1.buildOutputFormatter(this);
                await cli_lib_1.writeOutput(outputFormatter(cli_lib_1.cliConfig.getRawConfigData()), this.flags.output);
            }
        }
    }
}
exports.default = ConfigCommand;
ConfigCommand.description = 'list config file entries';
ConfigCommand.flags = {
    ...cli_lib_1.SmartThingsCommand.flags,
    ...cli_lib_1.outputListing.flags,
    verbose: command_1.flags.boolean({
        description: 'Include additional data in table output',
        char: 'v',
    }),
};
ConfigCommand.args = [{
        name: 'name',
        description: 'the config name',
    }];
