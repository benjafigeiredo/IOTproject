"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
class SchemaCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(SchemaCommand);
        await super.setup(args, argv, flags);
        const config = {
            tableFieldDefinitions: [
                'appName', 'partnerName', 'endpointAppId', 'schemaType', 'hostingType',
                'stClientId', 'oAuthAuthorizationUrl', 'oAuthTokenUrl', 'oAuthClientId',
                'oAuthClientSecret', 'icon', 'icon2x', 'icon3x',
                { prop: 'lambdaArn', skipEmpty: true },
                { prop: 'lambdaArnAP', skipEmpty: true },
                { prop: 'lambdaArnCN', skipEmpty: true },
                { prop: 'lambdaArnEU', skipEmpty: true },
                { prop: 'webhookUrl', skipEmpty: true },
            ],
            primaryKeyName: 'endpointAppId',
            sortKeyName: 'appName',
            listTableFieldDefinitions: ['appName', 'endpointAppId', 'hostingType'],
        };
        if (flags.verbose) {
            config.listTableFieldDefinitions.push('ARN/URL');
        }
        await cli_lib_1.outputListing(this, config, args.id, async () => {
            const items = await this.client.schema.list();
            return items.map(item => {
                return {
                    ...item,
                    'ARN/URL': item.hostingType === 'lambda' ? item.lambdaArn : item.webhookUrl,
                };
            });
        }, id => this.client.schema.get(id));
    }
}
exports.default = SchemaCommand;
SchemaCommand.description = 'list all ST Schema Apps currently available in a user account';
SchemaCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
    verbose: command_1.flags.boolean({
        description: 'include ARN in output',
        char: 'v',
    }),
};
SchemaCommand.args = [{
        name: 'id',
        description: 'the schema connector id',
    }];
