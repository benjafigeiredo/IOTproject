"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installedSchemaInstances = exports.tableFieldDefinitions = exports.listTableFieldDefinitions = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
exports.listTableFieldDefinitions = ['appName', 'partnerName', 'partnerSTConnection', 'isaId'];
exports.tableFieldDefinitions = [
    'appName', 'isaId', 'partnerName', 'partnerSTConnection', 'locationId',
    'icon', 'icon2x', 'icon3x',
];
async function installedSchemaInstances(client, locationIds, verbose) {
    if (!locationIds) {
        locationIds = (await client.locations.list()).map(it => it.locationId);
    }
    const isas = lodash_1.default.flatten(await Promise.all(locationIds.map(async (locationId) => {
        try {
            return (await client.schema.installedApps(locationId));
        }
        catch (e) {
            return [];
        }
    })));
    if (verbose) {
        return await cli_lib_1.withLocations(client, isas);
    }
    return isas;
}
exports.installedSchemaInstances = installedSchemaInstances;
class InstalledSchemaAppsCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(InstalledSchemaAppsCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'isaId',
            sortKeyName: 'appName',
            listTableFieldDefinitions: exports.listTableFieldDefinitions,
            tableFieldDefinitions: exports.tableFieldDefinitions,
        };
        if (this.flags.verbose) {
            config.listTableFieldDefinitions.splice(3, 0, 'location');
        }
        await cli_lib_1.outputListing(this, config, args.id, () => installedSchemaInstances(this.client, flags['location-id'], flags.verbose), id => this.client.schema.getInstalledApp(id));
    }
}
exports.default = InstalledSchemaAppsCommand;
InstalledSchemaAppsCommand.description = 'get a specific schema connector instance or a list of instances';
InstalledSchemaAppsCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'filter results by location',
        multiple: true,
    }),
    verbose: command_1.flags.boolean({
        description: 'include location name in output',
        char: 'v',
    }),
};
InstalledSchemaAppsCommand.args = [{
        name: 'id',
        description: 'the isa id',
    }];
