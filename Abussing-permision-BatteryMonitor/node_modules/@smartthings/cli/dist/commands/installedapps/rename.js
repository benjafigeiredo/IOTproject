"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const cli_lib_1 = require("@smartthings/cli-lib");
const installedapps_1 = require("../installedapps");
class DeviceComponentStatusCommand extends cli_lib_1.APICommand {
    async run() {
        var _a;
        const { args, argv, flags } = this.parse(DeviceComponentStatusCommand);
        await super.setup(args, argv, flags);
        const config = {
            itemName: 'installed app',
            primaryKeyName: 'installedAppId',
            sortKeyName: 'displayName',
            tableFieldDefinitions: installedapps_1.tableFieldDefinitions,
            listTableFieldDefinitions: installedapps_1.listTableFieldDefinitions,
        };
        if (flags.verbose) {
            config.listTableFieldDefinitions.splice(3, 0, 'location');
        }
        const listOptions = {
            locationId: flags['location-id'],
        };
        const id = await cli_lib_1.selectFromList(this, config, args.id, async () => {
            const apps = await this.client.installedApps.list(listOptions);
            if (this.flags.verbose) {
                return await cli_lib_1.withLocations(this.client, apps);
            }
            return apps;
        }, 'Select an app to rename.');
        const displayName = (_a = args.name) !== null && _a !== void 0 ? _a : (await inquirer_1.default.prompt({
            type: 'input',
            name: 'label',
            message: 'Enter new installed app name:',
        })).label;
        const updatedApp = await this.client.installedApps.update(id, { displayName });
        await cli_lib_1.formatAndWriteItem(this, config, updatedApp);
    }
}
exports.default = DeviceComponentStatusCommand;
DeviceComponentStatusCommand.description = 'renamed an installed app instance';
DeviceComponentStatusCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.formatAndWriteItem.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'filter results by location',
        multiple: true,
    }),
    verbose: command_1.flags.boolean({
        description: 'include location name in output',
        char: 'v',
    }),
};
DeviceComponentStatusCommand.args = [
    {
        name: 'id',
        description: 'the installed app id',
    },
    {
        name: 'name',
        description: 'the new installed app name',
    },
];
