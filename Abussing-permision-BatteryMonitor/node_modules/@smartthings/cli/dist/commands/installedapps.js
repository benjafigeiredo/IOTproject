"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tableFieldDefinitions = exports.listTableFieldDefinitions = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
exports.listTableFieldDefinitions = ['displayName', 'installedAppType', 'installedAppStatus', 'installedAppId'];
exports.tableFieldDefinitions = [
    'displayName', 'installedAppId', 'installedAppType', 'installedAppStatus',
    'singleInstance', 'appId', 'locationId', 'singleInstance',
    {
        label: 'Classifications',
        value: installedApp => { var _a, _b; return (_b = (_a = installedApp.classifications) === null || _a === void 0 ? void 0 : _a.join('\n')) !== null && _b !== void 0 ? _b : ''; },
        include: installedApp => !!installedApp.classifications,
    },
];
class InstalledAppsCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(InstalledAppsCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'installedAppId',
            sortKeyName: 'displayName',
            listTableFieldDefinitions: exports.listTableFieldDefinitions,
            tableFieldDefinitions: exports.tableFieldDefinitions,
        };
        if (this.flags.verbose) {
            config.listTableFieldDefinitions.splice(3, 0, 'location');
        }
        const listOptions = {
            locationId: flags['location-id'],
        };
        await cli_lib_1.outputListing(this, config, args.id, async () => {
            const apps = await this.client.installedApps.list(listOptions);
            if (this.flags.verbose) {
                return await cli_lib_1.withLocations(this.client, apps);
            }
            return apps;
        }, id => this.client.installedApps.get(id));
    }
}
exports.default = InstalledAppsCommand;
InstalledAppsCommand.description = 'get a specific app or a list of apps';
InstalledAppsCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'filter results by location',
        multiple: true,
    }),
    verbose: command_1.flags.boolean({
        description: 'include location name in output',
        char: 'v',
    }),
};
InstalledAppsCommand.args = [{
        name: 'id',
        description: 'the app id',
    }];
