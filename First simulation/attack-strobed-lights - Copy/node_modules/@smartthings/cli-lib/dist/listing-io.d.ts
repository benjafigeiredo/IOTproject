import { IdTranslationFunction, ListDataFunction, LookupDataFunction, Sorting } from './basic-io';
import { CommonOutputProducer } from './format';
import { SmartThingsCommandInterface } from './smartthings-command';
import { TableFieldDefinition } from './table-generator';
export declare type ListingOutputConfig<O, L> = Sorting & CommonOutputProducer<O> & {
    listTableFieldDefinitions?: TableFieldDefinition<L>[];
};
export declare function outputGenericListing<ID, O, L>(command: SmartThingsCommandInterface, config: ListingOutputConfig<O, L>, idOrIndex: ID | string | undefined, listFunction: ListDataFunction<L>, getFunction: LookupDataFunction<ID, O>, translateToId: IdTranslationFunction<ID, L>, includeIndex?: boolean): Promise<void>;
export declare namespace outputGenericListing {
    var flags: {
        output: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        compact: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        expanded: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        indent: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        json: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        yaml: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
}
export declare function outputListing<O, L>(command: SmartThingsCommandInterface, config: ListingOutputConfig<O, L>, idOrIndex: string | undefined, listFunction: ListDataFunction<L>, getFunction: LookupDataFunction<string, O>, includeIndex?: boolean): Promise<void>;
export declare namespace outputListing {
    var flags: {
        output: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        compact: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        expanded: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        indent: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        json: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        yaml: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
}
