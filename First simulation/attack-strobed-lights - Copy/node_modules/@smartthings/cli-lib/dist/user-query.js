"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.askForNumber = exports.askForInteger = exports.askForRequiredString = exports.askForString = exports.numberTransformer = void 0;
const tslib_1 = require("tslib");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
/**
 * Converts the empty string entered by the user to the word 'none` for the user when entering
 * optional numbers.
 */
const numberTransformer = (input, _, { isFinal }) => isFinal && input === '' ? 'none' : input;
exports.numberTransformer = numberTransformer;
/**
 * Simple wrapper around querying a user for a string. The return value will always be
 * a string with at least one character or undefined.
 */
const askForString = async (message, validate) => {
    const value = (await inquirer_1.default.prompt({
        type: 'input',
        name: 'value',
        message,
        validate,
    })).value;
    return value || undefined;
};
exports.askForString = askForString;
const askForRequiredString = async (message) => exports.askForString(message, (input) => input ? true : 'value is required');
exports.askForRequiredString = askForRequiredString;
const askForInteger = async (message, min, max) => {
    const value = (await inquirer_1.default.prompt({
        // Since 'number' converts strings to NaN without warning or error before validate is
        // called, we use `input` here and just do our own validation. (It's possible to do some
        // error correction in `transformer` but you can't return an error.)
        type: 'input',
        name: 'value',
        message,
        transformer: exports.numberTransformer,
        validate: input => {
            if (input === '') {
                return true;
            }
            if (!input.match(/^-?\d+$/)) {
                return `${input} is not a valid integer`;
            }
            const asNumber = Number(input);
            if (min !== undefined && asNumber < min) {
                return `must be no less than ${min}`;
            }
            if (max !== undefined && asNumber > max) {
                return `must be no more than ${max}`;
            }
            return true;
        },
    })).value;
    return value === '' ? undefined : Number(value);
};
exports.askForInteger = askForInteger;
const askForNumber = async (message, min, max) => {
    const value = (await inquirer_1.default.prompt({
        type: 'input',
        name: 'value',
        message,
        transformer: exports.numberTransformer,
        validate: input => {
            if (input === '') {
                return true;
            }
            const asNumber = Number(input);
            if (isNaN(asNumber)) {
                return `${input} is not a valid number`;
            }
            if (min !== undefined && asNumber < min) {
                return `must be no less than ${min}`;
            }
            if (max !== undefined && asNumber > max) {
                return `must be no more than ${max}`;
            }
            return true;
        },
    })).value;
    return value === '' ? undefined : Number(value);
};
exports.askForNumber = askForNumber;
