"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readYAMLFile = exports.requireDir = exports.requireFile = exports.findYAMLFilename = exports.isDir = exports.isFile = void 0;
const fs_1 = __importDefault(require("fs"));
const errors_1 = require("@oclif/errors");
const js_yaml_1 = __importDefault(require("js-yaml"));
const isFile = (filename) => fs_1.default.existsSync(filename) && fs_1.default.lstatSync(filename).isFile();
exports.isFile = isFile;
const isDir = (filename) => fs_1.default.existsSync(filename) && fs_1.default.lstatSync(filename).isDirectory();
exports.isDir = isDir;
const findYAMLFilename = (baseName) => {
    let retVal = `${baseName}.yaml`;
    if (exports.isFile(retVal)) {
        return retVal;
    }
    retVal = `${baseName}.yml`;
    if (exports.isFile(retVal)) {
        return retVal;
    }
    return false;
};
exports.findYAMLFilename = findYAMLFilename;
const requireFile = (filename) => {
    if (exports.isFile(filename)) {
        return filename;
    }
    throw new errors_1.CLIError(`missing required file: ${filename}`);
};
exports.requireFile = requireFile;
const requireDir = (dirName) => {
    if (exports.isDir(dirName)) {
        return dirName;
    }
    throw new errors_1.CLIError(`missing required directory: ${dirName}`);
};
exports.requireDir = requireDir;
// using `object` because it is what `yaml.safeLoad` returns
// eslint-disable-next-line @typescript-eslint/ban-types
const readYAMLFile = (filename, errorMessage) => {
    try {
        return js_yaml_1.default.safeLoad(fs_1.default.readFileSync(filename, 'utf-8'));
    }
    catch (error) {
        throw new errors_1.CLIError((errorMessage !== null && errorMessage !== void 0 ? errorMessage : 'error "{error}" reading {filename}')
            .replace('{filename}', 'filename')
            .replace('{error}', `${error}`));
    }
};
exports.readYAMLFile = readYAMLFile;
