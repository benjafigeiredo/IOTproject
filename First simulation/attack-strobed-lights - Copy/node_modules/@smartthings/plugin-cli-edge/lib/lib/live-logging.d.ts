/// <reference types="node" />
import { EventFormat } from '@smartthings/cli-lib';
import { Authenticator } from '@smartthings/core-sdk';
import { PeerCertificate } from 'tls';
export declare enum LogLevel {
    TRACE = 100,
    DEBUG = 200,
    INFO = 300,
    WARN = 400,
    ERROR = 500,
    FATAL = 600,
    PRINT = 1000
}
export interface LiveLogMessage {
    timestamp: string;
    /**
     * A UUID for this driver
     */
    driver_id: string;
    /**
     * The human readable name of this driver
     */
    driver_name: string;
    /**
     * The level this message is logged at
     */
    log_level: number;
    /**
     * The content of this message
     */
    message: string;
}
export declare enum DriverInfoStatus {
    NoArchive = "no archive",
    Downloading = "downloading",
    Installed = "installed",
    Failure = "failure",
    Unknown = "unknown"
}
export interface DriverInfo {
    /**
     * A UUID for this driver
     * */
    driver_id: string;
    /**
     * The human readable name of this driver
     * */
    driver_name: string;
    /**
     * If installed, the sha256 hash of the archive that was downloaded
     * */
    archive_hash?: string | null;
    /**
     * The current status of this driver
     * */
    status: string;
}
export declare function liveLogMessageFormatter(event: any): EventFormat;
export declare function parseIpAndPort(address: string): [string, string | undefined];
export declare function handleConnectionErrors(authority: string, error: string): never | void;
/**
 * Expected to manually verify the connected host (similar to overriding tls.checkServerIdentity)
 * by means that LiveLogClient isn't aware of ahead of time.
 */
export declare type HostVerifier = (cert: PeerCertificate) => Promise<void | never>;
export declare class LiveLogClient {
    private authority;
    private driversURL;
    private logsURL;
    private authenticator;
    private hostVerified;
    private verifier?;
    constructor(authority: string, authenticator: Authenticator, verifier?: HostVerifier);
    private request;
    private handleAxiosConnectionErrors;
    private getCertificate;
    getDrivers(): Promise<DriverInfo[]>;
    getLogSource(driverId?: string): Promise<string>;
}
//# sourceMappingURL=live-logging.d.ts.map