"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeOutput = exports.listTableFormatter = exports.itemTableFormatter = exports.yamlFormatter = exports.jsonFormatter = exports.calculateOutputFormat = exports.sort = void 0;
const tslib_1 = require("tslib");
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const io_util_1 = require("./io-util");
function sort(list, keyName) {
    return list.sort((a, b) => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const av = a[keyName].toLowerCase();
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const bv = b[keyName].toLowerCase();
        return av === bv ? 0 : av < bv ? -1 : 1;
    });
}
exports.sort = sort;
function calculateOutputFormat(command, defaultIOFormat) {
    // flags get highest priority...check them first
    if (command.flags.json) {
        return io_util_1.IOFormat.JSON;
    }
    if (command.flags.yaml) {
        return io_util_1.IOFormat.YAML;
    }
    // if we have an output filename, use that file's extension
    if (command.flags.output) {
        return io_util_1.formatFromFilename(command.flags.output);
    }
    if (defaultIOFormat) {
        return defaultIOFormat;
    }
    // if we're writing to the console, use user-friendly output, otherwise default to JSON
    return io_util_1.stdoutIsTTY() ? io_util_1.IOFormat.COMMON : io_util_1.IOFormat.JSON;
}
exports.calculateOutputFormat = calculateOutputFormat;
function jsonFormatter(indent) {
    return (data) => JSON.stringify(data, null, indent);
}
exports.jsonFormatter = jsonFormatter;
function yamlFormatter(indent) {
    return (data) => js_yaml_1.default.safeDump(data, { indent });
}
exports.yamlFormatter = yamlFormatter;
function itemTableFormatter(tableGenerator, fieldDefinitions) {
    return (item) => tableGenerator.buildTableFromItem(item, fieldDefinitions);
}
exports.itemTableFormatter = itemTableFormatter;
function listTableFormatter(tableGenerator, fieldDefinitions, includeIndex = false) {
    let count = 0;
    const tfd = includeIndex ? [{
            label: '#',
            value: () => (++count).toString(),
        }, ...fieldDefinitions] : fieldDefinitions;
    return (data) => {
        count = 0;
        return tableGenerator.buildTableFromList(data, tfd);
    };
}
exports.listTableFormatter = listTableFormatter;
async function writeOutput(dataStr, filename) {
    if (filename) {
        await io_util_1.writeFile(filename, dataStr);
    }
    else {
        process.stdout.write(dataStr);
        if (!dataStr.endsWith('\n')) {
            process.stdout.write('\n');
        }
    }
}
exports.writeOutput = writeOutput;
