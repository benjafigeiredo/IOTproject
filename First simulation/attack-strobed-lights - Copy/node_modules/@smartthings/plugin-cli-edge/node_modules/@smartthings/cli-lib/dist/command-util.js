"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseOptionsWithDefaults = exports.stringGetIdFromUser = exports.convertToId = exports.stringTranslateToId = exports.pluralItemName = exports.itemName = exports.isIndexArgument = void 0;
const tslib_1 = require("tslib");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const output_1 = require("./output");
const indexPattern = /^[1-9][0-9]*$/;
function isIndexArgument(str) {
    return !!str.match(indexPattern);
}
exports.isIndexArgument = isIndexArgument;
function itemName(command) {
    var _a;
    return (_a = command.itemName) !== null && _a !== void 0 ? _a : 'item';
}
exports.itemName = itemName;
function pluralItemName(command) {
    var _a;
    return (_a = command.pluralItemName) !== null && _a !== void 0 ? _a : (command.itemName ? `${command.itemName}s` : 'items');
}
exports.pluralItemName = pluralItemName;
async function stringTranslateToId(config, idOrIndex, listFunction) {
    if (!idOrIndex) {
        return undefined;
    }
    const primaryKeyName = config.primaryKeyName;
    if (!isIndexArgument(idOrIndex)) {
        // idOrIndex isn't a valid index so has to be an id (or bad)
        return idOrIndex;
    }
    const index = Number.parseInt(idOrIndex);
    const items = output_1.sort(await listFunction(), config.sortKeyName);
    if (index > items.length) {
        throw Error(`invalid index ${index} (enter an id or index between 1 and ${items.length} inclusive)`);
    }
    const matchingItem = items[index - 1];
    if (!(primaryKeyName in matchingItem)) {
        throw Error(`did not find key ${primaryKeyName} in data`);
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const pk = matchingItem[primaryKeyName];
    if (typeof pk === 'string') {
        return pk;
    }
    throw Error(`invalid type ${typeof pk} for primary key` +
        ` ${primaryKeyName} in ${JSON.stringify(matchingItem)}`);
}
exports.stringTranslateToId = stringTranslateToId;
function convertToId(itemIdOrIndex, primaryKeyName, sortedList) {
    if (itemIdOrIndex.length === 0) {
        return false;
    }
    const matchingItem = sortedList.find(item => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        return (primaryKeyName in item) && itemIdOrIndex === item[primaryKeyName];
    });
    if (matchingItem) {
        return itemIdOrIndex;
    }
    if (!isIndexArgument(itemIdOrIndex)) {
        return false;
    }
    const index = Number.parseInt(itemIdOrIndex);
    if (!Number.isNaN(index) && index > 0 && index <= sortedList.length) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const pk = sortedList[index - 1][primaryKeyName];
        if (typeof pk === 'string') {
            return pk;
        }
        throw Error(`invalid type ${typeof pk} for primary key` +
            ` ${primaryKeyName} in ${JSON.stringify(sortedList[index - 1])}`);
    }
    return false;
}
exports.convertToId = convertToId;
async function stringGetIdFromUser(fieldInfo, list, prompt) {
    const primaryKeyName = fieldInfo.primaryKeyName;
    const itemIdOrIndex = (await inquirer_1.default.prompt({
        type: 'input',
        name: 'itemIdOrIndex',
        message: prompt !== null && prompt !== void 0 ? prompt : 'Enter id or index',
        validate: input => {
            return convertToId(input, primaryKeyName, list)
                ? true
                : `Invalid id or index "${input}". Please enter an index or valid id.`;
        },
    })).itemIdOrIndex;
    const inputId = convertToId(itemIdOrIndex, primaryKeyName, list);
    if (inputId === false) {
        throw Error(`unable to convert ${itemIdOrIndex} to id`);
    }
    return inputId;
}
exports.stringGetIdFromUser = stringGetIdFromUser;
function chooseOptionsWithDefaults(options) {
    return {
        allowIndex: false,
        verbose: false,
        ...options,
    };
}
exports.chooseOptionsWithDefaults = chooseOptionsWithDefaults;
