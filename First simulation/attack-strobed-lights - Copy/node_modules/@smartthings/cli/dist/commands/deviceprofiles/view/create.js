"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_lib_1 = require("@smartthings/cli-lib");
const create_1 = require("../create");
const view_1 = require("../view");
class DeviceDefCreateCommand extends cli_lib_1.APICommand {
    async createWithCustomConfig(data) {
        if (!data.view) {
            throw Error('View property not defined');
        }
        // create the device config from the view data
        const deviceConfig = await this.client.presentation.create(view_1.augmentPresentationValues(data.view));
        // Set the vid and mnmn from the config
        if (!data.metadata) {
            data.metadata = {};
        }
        data.metadata.vid = deviceConfig.presentationId;
        data.metadata.mnmn = deviceConfig.manufacturerName;
        delete data.view;
        // Create the profile
        const profile = await this.client.deviceProfiles.create(create_1.cleanupRequest(data));
        // Return the composite object
        return { ...profile, view: view_1.prunePresentationValues(deviceConfig) };
    }
    async run() {
        const { args, argv, flags } = this.parse(DeviceDefCreateCommand);
        await super.setup(args, argv, flags);
        const createDeviceDefinition = async (_, data) => {
            if (data.view) {
                return this.createWithCustomConfig(data);
            }
            const profileAndConfig = await create_1.createWithDefaultConfig(this.client, data);
            return { ...profileAndConfig.deviceProfile, view: view_1.prunePresentationValues(profileAndConfig.deviceConfig) };
        };
        await cli_lib_1.inputAndOutputItem(this, { buildTableOutput: data => view_1.buildTableOutput(this.tableGenerator, data) }, createDeviceDefinition);
    }
}
exports.default = DeviceDefCreateCommand;
DeviceDefCreateCommand.description = 'create a new device profile and device configuration\n' +
    'Creates a new device profile and device configuration. Unlike deviceprofiles:create,\n' +
    'this command accepts a consolidated object that can include a device configuration\n' +
    'in a property named "view".';
DeviceDefCreateCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.inputAndOutputItem.flags,
};
DeviceDefCreateCommand.examples = [
    '$ smartthings deviceprofiles:view:create -i test.json',
    '',
    'This test.json file defines a switch that cannot be controlled by the automations builder:',
    '',
    'name: Test Switch',
    'components:',
    '  - id: main',
    '    capabilities:',
    '      - id: switch',
    'view:',
    '  dashboard:',
    '    states:',
    '      - capability: switch',
    '    actions:',
    '      - capability: switch',
    '  detailView:',
    '    - capability: switch',
    '  automation:',
    '    conditions:',
    '      - capability: switch  ',
];
DeviceDefCreateCommand.aliases = ['device-profiles:view:create'];
