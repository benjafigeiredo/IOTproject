"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const cli_lib_1 = require("@smartthings/cli-lib");
const aws_utils_1 = require("../../lib/aws-utils");
const common_flags_1 = require("../../lib/common-flags");
class SchemaUpdateCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(SchemaUpdateCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'endpointAppId',
            sortKeyName: 'appName',
            listTableFieldDefinitions: ['appName', 'endpointAppId', 'hostingType'],
        };
        const id = await cli_lib_1.selectFromList(this, config, args.id, () => this.client.schema.list());
        const [request] = await cli_lib_1.inputItem(this);
        if (flags.authorize) {
            if (request.hostingType === 'lambda') {
                if (request.lambdaArn) {
                    await aws_utils_1.addSchemaPermission(request.lambdaArn, flags.principal, flags['statement-id']);
                }
                if (request.lambdaArnAP) {
                    await aws_utils_1.addSchemaPermission(request.lambdaArnAP, flags.principal, flags['statement-id']);
                }
                if (request.lambdaArnCN) {
                    await aws_utils_1.addSchemaPermission(request.lambdaArnCN, flags.principal, flags['statement-id']);
                }
                if (request.lambdaArnEU) {
                    await aws_utils_1.addSchemaPermission(request.lambdaArnEU, flags.principal, flags['statement-id']);
                }
            }
            else {
                throw Error('Authorization is not applicable to WebHook schema connectors');
            }
        }
        const result = await this.client.schema.update(id, request);
        if (result.status !== 'success') {
            throw new errors_1.CLIError(`error ${result.status} updating ${id}`);
        }
        this.log(`Schema ${id} updated.`);
    }
}
exports.default = SchemaUpdateCommand;
SchemaUpdateCommand.description = 'update an ST Schema connector';
SchemaUpdateCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.inputItem.flags,
    authorize: command_1.flags.boolean({
        description: 'authorize Lambda functions to be called by SmartThings',
    }),
    ...common_flags_1.lambdaAuthFlags,
};
SchemaUpdateCommand.args = [{
        name: 'id',
        description: 'the app id',
    }];
