"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTableOutput = void 0;
const cli_lib_1 = require("@smartthings/cli-lib");
function buildTableOutput(tableGenerator, deviceConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    // This could use more advanced methods of tableGenerator.
    const table = tableGenerator.newOutputTable();
    table.push(['Presentation ID', deviceConfig.presentationId]);
    table.push(['Manufacturer Name', deviceConfig.manufacturerName]);
    if (deviceConfig.type) {
        table.push(['Type', deviceConfig.type]);
    }
    if (deviceConfig.iconUrl) {
        table.push(['Icon URL', deviceConfig.iconUrl]);
    }
    let dpInfo = 'No DP info';
    function buildDPInfoTable(items) {
        const subTable = tableGenerator.newOutputTable({ head: ['OS', 'URI', 'Operating Mode'] });
        for (const item of items) {
            subTable.push([item.os, item.dpUri, item.operatingMode ? item.operatingMode : 'none']);
        }
        return subTable.toString();
    }
    if (deviceConfig.dpInfo) {
        dpInfo = `DP Info\n${buildDPInfoTable(deviceConfig.dpInfo)}`;
    }
    function buildConfigEntryTable(items) {
        var _a;
        const subTable = tableGenerator.newOutputTable({ head: ['Component', 'Capability',
                'Version', 'Values', 'Visible Condition'] });
        for (const item of items) {
            const values = ((_a = item.values) === null || _a === void 0 ? void 0 : _a.length) ? item.values.length : 'none';
            const visibleCondition = item.visibleCondition ? 'included' : 'none';
            subTable.push([item.component, item.capability,
                item.version ? item.version : 'unspecified', values,
                visibleCondition]);
        }
        return subTable.toString();
    }
    let dashboardStates = 'No dashboard states';
    if (((_a = deviceConfig.dashboard) === null || _a === void 0 ? void 0 : _a.states) && deviceConfig.dashboard.states.length > 0) {
        dashboardStates = `Dashboard States\n${buildConfigEntryTable(deviceConfig.dashboard.states)}`;
    }
    let dashboardActions = 'No dashboard actions';
    if ((_c = (_b = deviceConfig.dashboard) === null || _b === void 0 ? void 0 : _b.actions) === null || _c === void 0 ? void 0 : _c.length) {
        dashboardActions = `Dashboard Actions\n${buildConfigEntryTable(deviceConfig.dashboard.actions)}`;
    }
    let detailView = 'No Detail View Items';
    if ((_d = deviceConfig.detailView) === null || _d === void 0 ? void 0 : _d.length) {
        detailView = `Detail View Items\n${buildConfigEntryTable(deviceConfig.detailView)}`;
    }
    let automationConditions = 'No automation conditions';
    if ((_f = (_e = deviceConfig.automation) === null || _e === void 0 ? void 0 : _e.conditions) === null || _f === void 0 ? void 0 : _f.length) {
        automationConditions = `Automation Conditions\n${buildConfigEntryTable(deviceConfig.automation.conditions)}`;
    }
    let automationActions = 'No automation actions';
    if ((_h = (_g = deviceConfig.automation) === null || _g === void 0 ? void 0 : _g.actions) === null || _h === void 0 ? void 0 : _h.length) {
        automationActions = `Automation Actions\n${buildConfigEntryTable(deviceConfig.automation.actions)}`;
    }
    return `Basic Information\n${table.toString()}\n\n` +
        `${dpInfo}\n\n` +
        `${dashboardStates}\n\n` +
        `${dashboardActions}\n\n` +
        `${detailView}\n\n` +
        `${automationConditions}\n\n` +
        `${automationActions}\n\n` +
        '(Information is summarized, for full details use YAML, -y, or JSON flag, -j.)';
}
exports.buildTableOutput = buildTableOutput;
class DeviceConfigPresentationCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DeviceConfigPresentationCommand);
        await super.setup(args, argv, flags);
        await cli_lib_1.outputItem(this, { buildTableOutput: data => buildTableOutput(this.tableGenerator, data) }, () => this.client.presentation.get(args.presentationId, args.manufacturerName));
    }
}
exports.default = DeviceConfigPresentationCommand;
DeviceConfigPresentationCommand.description = 'query device config by presentationId';
DeviceConfigPresentationCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputItem.flags,
};
DeviceConfigPresentationCommand.args = [{
        name: 'presentationId',
        description: 'system generated identifier that corresponds to a device presentation',
        required: true,
    },
    {
        name: 'manufacturerName',
        description: 'manufacturer name. Defaults to SmartThingsCommunity',
        required: false,
    }];
