import { DeviceProfile, DeviceProfileRequest, PresentationDeviceConfig, PresentationDeviceConfigCreate, SmartThingsClient } from '@smartthings/core-sdk';
import { APICommand } from '@smartthings/cli-lib';
import { DeviceDefinitionRequest } from './view';
import { CapabilityId } from '../capabilities';
export declare function generateDefaultConfig(client: SmartThingsClient, deviceProfileId: string, deviceProfile: DeviceProfileRequest | DeviceDefinitionRequest): Promise<PresentationDeviceConfigCreate>;
export interface DeviceProfileAndConfig {
    deviceProfile: DeviceProfile;
    deviceConfig: PresentationDeviceConfig;
}
export declare function createWithDefaultConfig(client: SmartThingsClient, data: DeviceDefinitionRequest): Promise<DeviceProfileAndConfig>;
export declare function cleanupRequest(deviceProfileRequest: Partial<DeviceProfile & {
    restrictions: unknown;
}>): DeviceProfileRequest;
export default class DeviceProfileCreateCommand extends APICommand {
    static description: string;
    static flags: {
        'dry-run': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        output: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        compact: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        expanded: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        indent: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        json: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        yaml: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        input: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        token: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        language: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        profile: import("@oclif/command/lib/flags").IOptionFlag<string>;
    };
    static examples: string[];
    static aliases: string[];
    run(): Promise<void>;
    protected capabilityDefined(idStr: string): Promise<boolean>;
    protected promptAndAddCapability(deviceProfile: DeviceProfileRequest, componentId: string, prompt?: string): Promise<CapabilityId>;
    protected promptAndAddComponent(deviceProfile: DeviceProfileRequest, previousComponentId: string): Promise<string>;
    getInputFromUser(): Promise<DeviceProfileRequest>;
}
