"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseComponent = exports.buildTableOutput = void 0;
const cli_lib_1 = require("@smartthings/cli-lib");
const status_1 = require("./status");
const devices_1 = require("../devices");
function buildTableOutput(tableGenerator, component) {
    const table = tableGenerator.newOutputTable({ head: ['Capability', 'Attribute', 'Value'] });
    for (const capabilityName of Object.keys(component)) {
        const capability = component[capabilityName];
        for (const attributeName of Object.keys(capability)) {
            const attribute = capability[attributeName];
            table.push([
                capabilityName,
                attributeName,
                attribute.value !== null ?
                    `${status_1.prettyPrintAttribute(attribute.value)}${attribute.unit ? ' ' + attribute.unit : ''}` : ''
            ]);
        }
    }
    return table.toString();
}
exports.buildTableOutput = buildTableOutput;
async function chooseComponent(command, componentFromArg, components) {
    if (!components || components.length === 0) {
        return 'main';
    }
    const config = {
        itemName: 'component',
        primaryKeyName: 'id',
        sortKeyName: 'id',
        listTableFieldDefinitions: [{ label: 'Id', value: component => component.id === 'main' ? 'main (default)' : component.id }],
    };
    const listComponents = async () => components;
    const preselectedComponentName = await cli_lib_1.stringTranslateToId(config, componentFromArg, listComponents);
    return cli_lib_1.selectFromList(command, config, preselectedComponentName, listComponents, undefined, true);
}
exports.chooseComponent = chooseComponent;
class DeviceComponentStatusCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DeviceComponentStatusCommand);
        await super.setup(args, argv, flags);
        const deviceId = await devices_1.chooseDevice(this, args.id, { allowIndex: true });
        const device = await this.client.devices.get(deviceId);
        const componentName = await chooseComponent(this, args.component, device.components);
        const componentStatus = await this.client.devices.getComponentStatus(deviceId, componentName);
        await cli_lib_1.formatAndWriteItem(this, { buildTableOutput: data => buildTableOutput(this.tableGenerator, data) }, componentStatus);
    }
}
exports.default = DeviceComponentStatusCommand;
DeviceComponentStatusCommand.description = "get the current status of a device component's attributes";
DeviceComponentStatusCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.formatAndWriteItem.flags,
};
DeviceComponentStatusCommand.args = [
    {
        name: 'id',
        description: 'the device id',
    },
    {
        name: 'component',
        description: 'the component id',
    },
];
