"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCHEMA_AWS_PRINCIPAL = void 0;
const cli_lib_1 = require("@smartthings/cli-lib");
const aws_utils_1 = require("../../lib/aws-utils");
const common_flags_1 = require("../../lib/common-flags");
exports.SCHEMA_AWS_PRINCIPAL = '148790070172';
class SchemaAppAuthorizeCommand extends cli_lib_1.SmartThingsCommand {
    async run() {
        var _a;
        const { args, argv, flags } = this.parse(SchemaAppAuthorizeCommand);
        await super.setup(args, argv, flags);
        const principal = (_a = flags.principal) !== null && _a !== void 0 ? _a : exports.SCHEMA_AWS_PRINCIPAL;
        const statementId = flags['statement-id'];
        aws_utils_1.addPermission(args.arn, principal, statementId).then(async (message) => {
            this.log(message);
        }).catch(err => {
            this.log(`caught error ${err}`);
        });
    }
}
exports.default = SchemaAppAuthorizeCommand;
SchemaAppAuthorizeCommand.description = 'authorize calls to your ST Schema Lambda function from SmartThings';
SchemaAppAuthorizeCommand.flags = {
    ...cli_lib_1.SmartThingsCommand.flags,
    ...common_flags_1.lambdaAuthFlags,
};
SchemaAppAuthorizeCommand.args = [
    {
        name: 'arn',
        description: 'the ARN of the AWS Lambda function',
        required: true,
    },
];
SchemaAppAuthorizeCommand.examples = [
    '$ smartthings schema:authorize arn:aws:lambda:us-east-1:1234567890:function:your-test-app',
    '',
    'Note that this command is the same as running the following with the AWS CLI:',
    '',
    '$ aws lambda add-permission --region us-east-1 \\',
    '    --function-name arn:aws:lambda:us-east-1:1234567890:function:your-test-app \\',
    '    --statement-id smartthings --principal 148790070172 --action lambda:InvokeFunction',
    '',
    'It requires your machine to be configured to run the AWS CLI',
];
