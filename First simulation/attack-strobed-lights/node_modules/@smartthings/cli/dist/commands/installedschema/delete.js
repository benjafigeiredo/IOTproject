"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const installedschema_1 = require("../installedschema");
class InstalledSchemaAppDeleteCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(InstalledSchemaAppDeleteCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'isaId',
            sortKeyName: 'appName',
            listTableFieldDefinitions: ['appName', 'partnerName', 'partnerSTConnection', 'isaId'],
        };
        if (this.flags.verbose) {
            config.listTableFieldDefinitions.splice(3, 0, 'location');
        }
        const id = await cli_lib_1.selectFromList(this, config, args.id, () => installedschema_1.installedSchemaInstances(this.client, flags['location-id'], flags.verbose), 'Select an installed schema app to delete.');
        await this.client.schema.deleteInstalledApp(id);
        this.log(`Installed schema app ${id} deleted.`);
    }
}
exports.default = InstalledSchemaAppDeleteCommand;
InstalledSchemaAppDeleteCommand.description = 'delete the installed schema connector instance';
InstalledSchemaAppDeleteCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'filter results by location',
        multiple: true,
    }),
    verbose: command_1.flags.boolean({
        description: 'include location name in output',
        char: 'v',
    }),
};
InstalledSchemaAppDeleteCommand.args = [{
        name: 'id',
        description: 'installed schema connector UUID',
    }];
