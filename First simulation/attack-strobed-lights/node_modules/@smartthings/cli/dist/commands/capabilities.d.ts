import { flags } from '@oclif/command';
import { Capability, CapabilitySummary, CapabilityJSONSchema, SmartThingsClient } from '@smartthings/core-sdk';
import { APICommand, ListDataFunction, Sorting, TableGenerator } from '@smartthings/cli-lib';
export declare const capabilityIdInputArgs: {
    name: string;
    description: string;
}[];
export declare const capabilityIdOrIndexInputArgs: {
    name: string;
    description: string;
}[];
export declare function attributeType(attr: CapabilityJSONSchema, multilineObjects?: boolean): string;
export declare function buildTableOutput(tableGenerator: TableGenerator, capability: Capability): string;
export interface CapabilityId {
    id: string;
    version: number;
}
export declare type CapabilitySummaryWithNamespace = CapabilitySummary & {
    namespace: string;
};
export declare function buildListTableOutput(this: APICommand, capabilities: CapabilitySummaryWithNamespace[]): string;
/**
 * Get all custom capabilities for all namespaces and include `namespace` as a
 * property in the results. If no namespace is specified, this will make an API
 * call to get all namespaces and list capabilities for all of them.
 */
export declare function getCustomByNamespace(client: SmartThingsClient, namespace?: string): Promise<CapabilitySummaryWithNamespace[]>;
export declare function getStandard(client: SmartThingsClient): Promise<CapabilitySummaryWithNamespace[]>;
export declare function getAllFiltered(client: SmartThingsClient, filter: string): Promise<CapabilitySummaryWithNamespace[]>;
export declare function getIdFromUser(fieldInfo: Sorting, list: CapabilitySummaryWithNamespace[], promptMessage?: string): Promise<CapabilityId>;
export declare function translateToId(sortKeyName: string, idOrIndex: string | CapabilityId, listFunction: ListDataFunction<CapabilitySummaryWithNamespace>): Promise<CapabilityId>;
export declare function chooseCapability(command: APICommand, idFromArgs?: string, versionFromArgs?: number, prompt?: string): Promise<CapabilityId>;
export declare function chooseCapabilityFiltered(command: APICommand, prompt: string, filter: string): Promise<CapabilityId>;
export default class CapabilitiesCommand extends APICommand {
    static description: string;
    static flags: {
        namespace: flags.IOptionFlag<string | undefined>;
        standard: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        output: flags.IOptionFlag<string | undefined>;
        compact: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        expanded: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        indent: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        json: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        yaml: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        token: flags.IOptionFlag<string | undefined>;
        language: flags.IOptionFlag<string | undefined>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        profile: flags.IOptionFlag<string>;
    };
    static args: {
        name: string;
        description: string;
    }[];
    run(): Promise<void>;
}
