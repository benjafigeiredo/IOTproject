"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseDeviceProfile = exports.buildTableOutput = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
function buildTableOutput(tableGenerator, data, basicTableHook) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const table = tableGenerator.newOutputTable();
    table.push(['Name', data.name]);
    for (const comp of data.components) {
        table.push([`${comp.id} component`, comp.capabilities ? comp.capabilities.map(it => it.id).join('\n') : '']);
    }
    table.push(['Id', data.id]);
    table.push(['Device Type', (_b = (_a = data.metadata) === null || _a === void 0 ? void 0 : _a.deviceType) !== null && _b !== void 0 ? _b : '']);
    table.push(['OCF Device Type', (_d = (_c = data.metadata) === null || _c === void 0 ? void 0 : _c.ocfDeviceType) !== null && _d !== void 0 ? _d : '']);
    table.push(['Manufacturer Name', (_f = (_e = data.metadata) === null || _e === void 0 ? void 0 : _e.mnmn) !== null && _f !== void 0 ? _f : '']);
    table.push(['Presentation ID', (_h = (_g = data.metadata) === null || _g === void 0 ? void 0 : _g.vid) !== null && _h !== void 0 ? _h : '']);
    table.push(['Status', data.status]);
    if (basicTableHook) {
        basicTableHook(table);
    }
    let preferencesInfo = 'No preferences';
    if ((_j = data.preferences) === null || _j === void 0 ? void 0 : _j.length) {
        preferencesInfo = 'Device Preferences\n' + tableGenerator.buildTableFromList(data.preferences, ['preferenceId', 'title', 'preferenceType', 'definition.default']);
    }
    return `Basic Information\n${table.toString()}\n\n` +
        `${preferencesInfo}\n\n` +
        '(Information is summarized, for full details use YAML, -y, or JSON flag, -j.)';
}
exports.buildTableOutput = buildTableOutput;
async function chooseDeviceProfile(command, deviceProfileFromArg, options) {
    const opts = cli_lib_1.chooseOptionsWithDefaults(options);
    const config = {
        itemName: 'device profile',
        primaryKeyName: 'id',
        sortKeyName: 'name',
        listTableFieldDefinitions: ['name', 'status', 'id'],
    };
    if (opts.verbose) {
        config.listTableFieldDefinitions.splice(3, 0, 'locales');
    }
    const listDeviceProfiles = async () => {
        const deviceProfiles = await command.client.deviceProfiles.list();
        if (opts.verbose) {
            const ops = deviceProfiles.map(async (it) => {
                try {
                    return await command.client.deviceProfiles.listLocales(it.id);
                }
                catch (error) {
                    if ('message' in error && error.message.includes('status code 404')) {
                        return [];
                    }
                    else {
                        throw error;
                    }
                }
            });
            const locales = await Promise.all(ops);
            return deviceProfiles.map((deviceProfile, index) => {
                return { ...deviceProfile, locales: locales[index].map((it) => it.tag).sort().join(', ') };
            });
        }
        return deviceProfiles;
    };
    const preselectedId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, deviceProfileFromArg, listDeviceProfiles)
        : deviceProfileFromArg;
    return cli_lib_1.selectFromList(command, config, preselectedId, listDeviceProfiles);
}
exports.chooseDeviceProfile = chooseDeviceProfile;
class DeviceProfilesCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DeviceProfilesCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'id',
            sortKeyName: 'name',
            listTableFieldDefinitions: ['name', 'status', 'id'],
            buildTableOutput: (data) => buildTableOutput(this.tableGenerator, data),
        };
        if (this.flags.verbose) {
            config.listTableFieldDefinitions.push({ label: 'Presentation ID', value: item => { var _a, _b; return (_b = (_a = item.metadata) === null || _a === void 0 ? void 0 : _a.vid) !== null && _b !== void 0 ? _b : ''; } });
            config.listTableFieldDefinitions.push({ label: 'Manufacturer Name', value: item => { var _a, _b; return (_b = (_a = item.metadata) === null || _a === void 0 ? void 0 : _a.mnmn) !== null && _b !== void 0 ? _b : ''; } });
        }
        await cli_lib_1.outputListing(this, config, args.id, () => this.client.deviceProfiles.list(), id => this.client.deviceProfiles.get(id));
    }
}
exports.default = DeviceProfilesCommand;
DeviceProfilesCommand.description = 'list all device profiles available in a user account or retrieve a single profile';
DeviceProfilesCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
    verbose: command_1.flags.boolean({
        description: 'include presentationId and manufacturerName in list output',
        char: 'v',
    }),
};
DeviceProfilesCommand.args = [{
        name: 'id',
        description: 'device profile to retrieve; UUID or the number of the profile from list',
    }];
DeviceProfilesCommand.examples = [
    '$ smartthings deviceprofiles                      # list all device profiles',
    '$ smartthings deviceprofiles bb0fdc5-...-a8bd2ea  # show device profile with the specified UUID',
    '$ smartthings deviceprofiles 2                    # show the second device profile in the list',
    '$ smartthings deviceprofiles 3 -j                 # show the profile in JSON format',
    '$ smartthings deviceprofiles 5 -y                 # show the profile in YAML format',
    '$ smartthings deviceprofiles 4 -j -o profile.json # write the profile to the file "profile.json"',
];
DeviceProfilesCommand.aliases = ['device-profiles'];
