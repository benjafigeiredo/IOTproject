"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTableOutput = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const capabilities_1 = require("../capabilities");
function buildTableOutput(tableGenerator, presentation) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const basicInfo = tableGenerator.buildTableFromItem(presentation, ['id', 'version']);
    let dashboardStates = 'No dashboard states';
    if (((_a = presentation.dashboard) === null || _a === void 0 ? void 0 : _a.states) && presentation.dashboard.states.length > 0) {
        const newDashboardStates = tableGenerator.buildTableFromList(presentation.dashboard.states, ['label', { label: 'Alternatives', value: (state) => { var _a, _b, _c; return ((_c = (_b = (_a = state.alternatives) === null || _a === void 0 ? void 0 : _a.length) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'none'); } }, 'group',]);
        dashboardStates = `Dashboard States\n${newDashboardStates}`;
    }
    function buildDisplayTypeTable(items) {
        return tableGenerator.buildTableFromList(items, ['displayType']);
    }
    function buildLabelDisplayTypeTable(items) {
        const subTable = tableGenerator.newOutputTable({ head: ['Label', 'Display Type'] });
        for (const item of items) {
            subTable.push([item.label, item.displayType]);
        }
        return subTable.toString();
    }
    let dashboardActions = 'No dashboard actions';
    if ((_c = (_b = presentation.dashboard) === null || _b === void 0 ? void 0 : _b.actions) === null || _c === void 0 ? void 0 : _c.length) {
        dashboardActions = `Dashboard Actions\n${buildDisplayTypeTable(presentation.dashboard.actions)}`;
    }
    let dashboardBasicPlus = 'No dashboard basic plus items';
    if ((_e = (_d = presentation.dashboard) === null || _d === void 0 ? void 0 : _d.basicPlus) === null || _e === void 0 ? void 0 : _e.length) {
        dashboardBasicPlus = `Dashboard Basic Plus\n${buildDisplayTypeTable(presentation.dashboard.basicPlus)}`;
    }
    let detailView = 'No Detail View Items';
    if ((_f = presentation.detailView) === null || _f === void 0 ? void 0 : _f.length) {
        const subTable = tableGenerator.buildTableFromList(presentation.detailView, ['label', 'displayType']);
        detailView = `Detail View Items\n${subTable}`;
    }
    let automationConditions = 'No automation conditions';
    if ((_h = (_g = presentation.automation) === null || _g === void 0 ? void 0 : _g.conditions) === null || _h === void 0 ? void 0 : _h.length) {
        automationConditions = `Automation Conditions\n${buildLabelDisplayTypeTable(presentation.automation.conditions)}`;
    }
    let automationActions = 'No automation actions';
    if ((_k = (_j = presentation.automation) === null || _j === void 0 ? void 0 : _j.actions) === null || _k === void 0 ? void 0 : _k.length) {
        automationActions = `Automation Actions\n${buildLabelDisplayTypeTable(presentation.automation.actions)}`;
    }
    return `Basic Information\n${basicInfo}\n\n` +
        `${dashboardStates}\n\n` +
        `${dashboardActions}\n\n` +
        `${dashboardBasicPlus}\n\n` +
        `${detailView}\n\n` +
        `${automationConditions}\n\n` +
        `${automationActions}\n\n` +
        '(Information is summarized, for full details use YAML, -y, or JSON flag, -j.)';
}
exports.buildTableOutput = buildTableOutput;
class PresentationsCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(PresentationsCommand);
        await super.setup(args, argv, flags);
        const idOrIndex = args.version
            ? { id: args.id, version: args.version }
            : args.id;
        const config = {
            primaryKeyName: 'id',
            sortKeyName: 'id',
            listTableFieldDefinitions: ['id', 'version', 'status'],
            buildTableOutput: (data) => buildTableOutput(this.tableGenerator, data),
        };
        await cli_lib_1.outputGenericListing(this, config, idOrIndex, () => capabilities_1.getCustomByNamespace(this.client, flags.namespace), (id) => this.client.capabilities.getPresentation(id.id, id.version), (idOrIndex, listFunction) => capabilities_1.translateToId(config.sortKeyName, idOrIndex, listFunction));
    }
}
exports.default = PresentationsCommand;
PresentationsCommand.description = 'get presentation information for a specific capability';
PresentationsCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputGenericListing.flags,
    namespace: command_1.flags.string({
        char: 'n',
        description: 'a specific namespace to query; will use all by default',
    }),
};
PresentationsCommand.args = capabilities_1.capabilityIdOrIndexInputArgs;
