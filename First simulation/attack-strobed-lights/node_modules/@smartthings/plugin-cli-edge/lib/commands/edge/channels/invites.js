"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseInvite = exports.tableFieldDefinitions = exports.listTableFieldDefinitions = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const edge_command_1 = require("../../../lib/edge-command");
exports.listTableFieldDefinitions = [
    'id',
    'metadata.name',
    { label: 'Channel Id', prop: 'resource.components[0].id' },
    {
        label: 'Expiration',
        value: ({ expiration }) => expiration ? new Date(expiration * 1000).toISOString() : '',
    },
    'acceptUrl',
];
exports.tableFieldDefinitions = [
    ...exports.listTableFieldDefinitions,
    'profileId',
];
const buildListFunction = (command, channelId) => async () => {
    const channelIds = channelId
        ? [channelId]
        : (await command.edgeClient.channels.list()).map(channel => channel.channelId);
    return (await Promise.all(channelIds.map(async (channelId) => await command.edgeClient.invites.list(channelId)))).flat();
};
async function chooseInvite(command, promptMessage, channelId, inviteFromArg, options) {
    const opts = cli_lib_1.chooseOptionsWithDefaults(options);
    const config = {
        itemName: 'invitation',
        primaryKeyName: 'id',
        sortKeyName: 'id',
        listTableFieldDefinitions: ['id', 'metadata.name'],
    };
    const listChannels = buildListFunction(command, channelId);
    const preselectedId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, inviteFromArg, listChannels)
        : inviteFromArg;
    return cli_lib_1.selectFromList(command, config, preselectedId, listChannels, promptMessage);
}
exports.chooseInvite = chooseInvite;
class ChannelsInvitesCommand extends edge_command_1.EdgeCommand {
    async run() {
        const { args, argv, flags } = this.parse(ChannelsInvitesCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'id',
            sortKeyName: 'id',
            listTableFieldDefinitions: exports.listTableFieldDefinitions,
            tableFieldDefinitions: exports.tableFieldDefinitions,
        };
        await cli_lib_1.outputListing(this, config, args.idOrIndex, buildListFunction(this, flags.channel), id => this.edgeClient.invites.get(id));
    }
}
exports.default = ChannelsInvitesCommand;
ChannelsInvitesCommand.description = 'list invitations or retrieve a single invitation by id or index';
ChannelsInvitesCommand.flags = {
    ...edge_command_1.EdgeCommand.flags,
    ...cli_lib_1.outputListing.flags,
    'channel': command_1.flags.string({
        char: 'C',
        description: 'channel id',
    }),
};
ChannelsInvitesCommand.args = [{
        name: 'idOrIndex',
        description: 'the invitation id or number in list',
    }];
ChannelsInvitesCommand.aliases = ['edge:channels:invitations'];
ChannelsInvitesCommand.examples = [
    'smartthings edge:channels:invites                  # list all invites on all channels you own',
    'smartthings edge:channels:invites 2                # list details about the second invite show when listed as in the example above',
    'smartthings edge:channels:invites -C <channel id>  # list all invites on channel with id <channel id>',
    'smartthings edge:channels:invites <invite id>      # list details about the invite with id <invite id>',
];
