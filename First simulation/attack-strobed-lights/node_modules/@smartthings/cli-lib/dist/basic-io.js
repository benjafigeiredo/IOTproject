"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inputAndOutputItem = exports.outputList = exports.outputItem = exports.inputItem = void 0;
const errors_1 = require("@oclif/errors");
const command_1 = require("@oclif/command");
const format_1 = require("./format");
const input_builder_1 = require("./input-builder");
const output_1 = require("./output");
const output_builder_1 = require("./output-builder");
async function inputItem(command, ...alternateInputProcessors) {
    const inputProcessor = input_builder_1.buildInputProcessor(command, ...alternateInputProcessors);
    if (inputProcessor.hasInput()) {
        const item = await inputProcessor.read();
        return [item, inputProcessor.ioFormat];
    }
    else {
        throw new errors_1.CLIError('input is required either via file specified with --input option or from stdin');
    }
}
exports.inputItem = inputItem;
inputItem.flags = input_builder_1.buildInputProcessor.flags;
async function outputItem(command, config, getData) {
    const data = await getData();
    await format_1.formatAndWriteItem(command, config, data);
    return data;
}
exports.outputItem = outputItem;
outputItem.flags = output_builder_1.buildOutputFormatter.flags;
async function outputList(command, config, getData, includeIndex = false, forUserQuery = false) {
    const list = output_1.sort(await getData(), config.sortKeyName);
    await format_1.formatAndWriteList(command, config, list, includeIndex, forUserQuery);
    return list;
}
exports.outputList = outputList;
outputList.flags = output_builder_1.buildOutputFormatter.flags;
async function inputAndOutputItem(command, config, executeAction, ...alternateInputProcessors) {
    const [itemIn, defaultIOFormat] = await inputItem(command, ...alternateInputProcessors);
    if (command.flags['dry-run']) {
        const outputFormatter = output_builder_1.buildOutputFormatter(command, defaultIOFormat);
        await output_1.writeOutput(outputFormatter(itemIn), command.flags.output);
    }
    else {
        const item = await executeAction(undefined, itemIn);
        await format_1.formatAndWriteItem(command, config, item, defaultIOFormat);
    }
}
exports.inputAndOutputItem = inputAndOutputItem;
inputAndOutputItem.flags = {
    ...input_builder_1.buildInputProcessor.flags,
    ...output_builder_1.buildOutputFormatter.flags,
    'dry-run': command_1.flags.boolean({
        char: 'd',
        description: "produce JSON but don't actually submit",
    }),
};
