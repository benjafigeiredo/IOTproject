"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartThingsCommand = void 0;
const tslib_1 = require("tslib");
const command_1 = tslib_1.__importStar(require("@oclif/command"));
const cli_config_1 = require("./cli-config");
const logger_1 = require("./logger");
const table_generator_1 = require("./table-generator");
/**
 * The base class for all commands in the SmartThings CLI.
 */
class SmartThingsCommand extends command_1.default {
    get logger() {
        if (!this._logger) {
            this._logger = logger_1.logManager.getLogger('cli');
        }
        return this._logger;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get profileConfig() {
        if (!this._profileConfig) {
            throw new Error('SmartThingsCommand not properly initialized');
        }
        return this._profileConfig;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get args() {
        if (!this._args) {
            throw new Error('SmartThingsCommand not properly initialized');
        }
        return this._args;
    }
    /**
     * Return input arguments, not including flags.
     */
    get inputArgs() {
        if (!this._argv) {
            throw new Error('SmartThingsCommand not properly initialized');
        }
        return this._argv;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get flags() {
        if (!this._flags) {
            throw new Error('SmartThingsCommand not properly initialized');
        }
        return this._flags;
    }
    get profileName() {
        if (!this._profileName) {
            throw new Error('SmartThingsCommand not properly initialized');
        }
        return this._profileName;
    }
    get tableGenerator() {
        if (!this._tableGenerator) {
            throw new Error('SmartThingsCommand not properly initialized');
        }
        return this._tableGenerator;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async setup(args, argv, flags) {
        this._args = args;
        this._argv = argv;
        this._flags = flags;
        this._profileName = flags.profile || 'default';
        this._profileConfig = cli_config_1.cliConfig.getProfile(flags.profile);
        let compact = true;
        if ('compactTableOutput' in this.profileConfig) {
            compact = this.profileConfig.compactTableOutput;
        }
        if (this.flags.expanded) {
            compact = false;
        }
        else if (this.flags.compact) {
            compact = true;
        }
        this._tableGenerator = new table_generator_1.DefaultTableGenerator(compact);
    }
    abort(message) {
        if (message) {
            this.log(message);
        }
        // eslint-disable-next-line no-process-exit
        process.exit(0);
    }
}
exports.SmartThingsCommand = SmartThingsCommand;
SmartThingsCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    profile: command_1.flags.string({
        char: 'p',
        description: 'configuration profile',
        default: 'default',
        env: 'SMARTTHINGS_PROFILE',
    }),
};
