"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tableFieldDefinitions = exports.listTableFieldDefinitions = exports.chooseChannel = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const edge_command_1 = require("../../lib/edge-command");
const chooseChannelOptionsWithDefaults = (options) => ({
    includeReadOnly: false,
    ...cli_lib_1.chooseOptionsWithDefaults(options),
});
async function chooseChannel(command, promptMessage, channelFromArg, options) {
    const opts = chooseChannelOptionsWithDefaults(options);
    const config = {
        itemName: 'channel',
        primaryKeyName: 'channelId',
        sortKeyName: 'name',
    };
    const listChannels = () => command.edgeClient.channels.list({
        includeReadOnly: opts.includeReadOnly,
    });
    const preselectedId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, channelFromArg, listChannels)
        : channelFromArg;
    return cli_lib_1.selectFromList(command, config, preselectedId, listChannels, promptMessage);
}
exports.chooseChannel = chooseChannel;
exports.listTableFieldDefinitions = ['channelId', 'name', 'description', 'termsOfServiceUrl',
    'createdDate', 'lastModifiedDate'];
exports.tableFieldDefinitions = exports.listTableFieldDefinitions;
class ChannelsCommand extends edge_command_1.EdgeCommand {
    async run() {
        const { args, argv, flags } = this.parse(ChannelsCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'channelId',
            sortKeyName: 'name',
            listTableFieldDefinitions: exports.listTableFieldDefinitions,
            tableFieldDefinitions: exports.tableFieldDefinitions,
        };
        await cli_lib_1.outputListing(this, config, args.idOrIndex, () => this.edgeClient.channels.list({ includeReadOnly: flags['include-read-only'] }), id => this.edgeClient.channels.get(id));
    }
}
exports.default = ChannelsCommand;
ChannelsCommand.description = 'list all channels owned by you or retrieve a single channel';
ChannelsCommand.flags = {
    ...edge_command_1.EdgeCommand.flags,
    ...cli_lib_1.outputListing.flags,
    'include-read-only': command_1.flags.boolean({
        char: 'I',
        description: 'include subscribed-to channels as well as owned channels',
    }),
};
ChannelsCommand.args = [{
        name: 'idOrIndex',
        description: 'the channel id or number in list',
    }];
ChannelsCommand.examples = [`# list all user-owned channels
$ smartthings edge:channels

# list user-owned and subscribed channels
$ smartthings edge:channels --include-read-only

# display details about the second channel listed when running "smartthings edge:channels"
$ smartthings edge:channels 2`];
