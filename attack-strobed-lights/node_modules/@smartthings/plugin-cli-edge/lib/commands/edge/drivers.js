"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseDriver = void 0;
const cli_lib_1 = require("@smartthings/cli-lib");
const edge_command_1 = require("../../lib/edge-command");
async function chooseDriver(command, promptMessage, commandLineDriverId, options) {
    const opts = cli_lib_1.chooseOptionsWithDefaults(options);
    const config = {
        itemName: 'driver',
        primaryKeyName: 'driverId',
        sortKeyName: 'name',
    };
    const listDrivers = () => command.edgeClient.drivers.list();
    const preselectedId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, commandLineDriverId, listDrivers)
        : commandLineDriverId;
    return cli_lib_1.selectFromList(command, config, preselectedId, listDrivers, promptMessage);
}
exports.chooseDriver = chooseDriver;
class DriversCommand extends edge_command_1.EdgeCommand {
    async run() {
        const { args, argv, flags } = this.parse(DriversCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'driverId',
            sortKeyName: 'name',
            tableFieldDefinitions: ['driverId', 'name', 'version', 'packageKey'],
            listTableFieldDefinitions: ['driverId', 'name', 'version', 'packageKey'],
        };
        await cli_lib_1.outputListing(this, config, args.idOrIndex, () => this.edgeClient.drivers.list(), id => this.edgeClient.drivers.get(id));
    }
}
exports.default = DriversCommand;
DriversCommand.description = 'list all drivers available in a user account or retrieve a single driver';
DriversCommand.flags = {
    ...edge_command_1.EdgeCommand.flags,
    ...cli_lib_1.outputListing.flags,
};
DriversCommand.args = [{
        name: 'idOrIndex',
        description: 'the driver id or number in list',
    }];
