"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.APICommand = void 0;
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const os_locale_1 = tslib_1.__importDefault(require("os-locale"));
const core_sdk_1 = require("@smartthings/core-sdk");
const logger_1 = require("./logger");
const login_authenticator_1 = require("./login-authenticator");
const smartthings_command_1 = require("./smartthings-command");
/**
 * Base class for commands that need to use Rest API commands via the
 * SmartThings Core SDK.
 */
class APICommand extends smartthings_command_1.SmartThingsCommand {
    constructor() {
        super(...arguments);
        this.clientIdProvider = login_authenticator_1.defaultClientIdProvider;
    }
    get authenticator() {
        if (!this._authenticator) {
            throw new Error('APICommand not properly initialized');
        }
        return this._authenticator;
    }
    get client() {
        if (!this._client) {
            throw new Error('APICommand not properly initialized');
        }
        return this._client;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async setup(args, argv, flags) {
        await super.setup(args, argv, flags);
        if (flags.token) {
            this.token = flags.token;
        }
        else if ('token' in this.profileConfig) {
            this.token = this.profileConfig.token;
        }
        if ('clientIdProvider' in this.profileConfig) {
            this.clientIdProvider = this.profileConfig.clientIdProvider;
        }
        const logger = logger_1.logManager.getLogger('rest-client');
        const headers = flags.language ?
            (flags.language === 'NONE' ? undefined : { 'Accept-Language': flags.language }) :
            { 'Accept-Language': await os_locale_1.default() };
        this._authenticator = this.token
            ? new core_sdk_1.BearerTokenAuthenticator(this.token)
            : new login_authenticator_1.LoginAuthenticator(this.profileName, this.clientIdProvider);
        this._client = new core_sdk_1.SmartThingsClient(this._authenticator, { urlProvider: this.clientIdProvider, logger, headers });
    }
}
exports.APICommand = APICommand;
APICommand.flags = {
    ...smartthings_command_1.SmartThingsCommand.flags,
    token: command_1.flags.string({
        char: 't',
        description: 'the auth token to use',
        env: 'SMARTTHINGS_TOKEN',
    }),
    language: command_1.flags.string({
        description: 'ISO language code or "NONE" to not specify a language. Defaults to the OS locale',
    }),
};
