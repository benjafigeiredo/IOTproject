"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const cli_lib_1 = require("@smartthings/cli-lib");
const devicepreferences_1 = require("../devicepreferences");
class DevicePreferencesCreateCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DevicePreferencesCreateCommand);
        await super.setup(args, argv, flags);
        await cli_lib_1.inputAndOutputItem(this, { tableFieldDefinitions: devicepreferences_1.tableFieldDefinitions }, (_, input) => this.client.devicePreferences.create(input), cli_lib_1.userInputProcessor(this));
    }
    async getInputFromUser() {
        const name = await cli_lib_1.askForString('Preference name:', input => !input || input.match(/^[a-z][a-zA-Z0-9]{2,23}$/) ? true : 'must be camelCase starting with a lowercase letter and 3-24 characters');
        const title = await cli_lib_1.askForRequiredString('Preference title:');
        const description = await cli_lib_1.askForString('Preference description:');
        const required = (await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'value',
            message: 'Is the preference required?',
            default: false,
        })).value;
        const preferenceType = (await inquirer_1.default.prompt({
            type: 'list',
            name: 'preferenceType',
            message: 'Choose a type for your preference.',
            choices: ['integer', 'number', 'boolean', 'string', 'enumeration'],
        })).preferenceType;
        const base = {
            name, title, description, required,
        };
        if (preferenceType === 'integer') {
            const minimum = await cli_lib_1.askForInteger('Optional minimum value.');
            const maximum = await cli_lib_1.askForInteger('Optional maximum value.', minimum);
            const defaultValue = await cli_lib_1.askForInteger('Optional default value.', minimum, maximum);
            return {
                ...base, preferenceType,
                definition: {
                    minimum: minimum !== null && minimum !== void 0 ? minimum : undefined,
                    maximum: maximum !== null && maximum !== void 0 ? maximum : undefined,
                    default: defaultValue !== null && defaultValue !== void 0 ? defaultValue : undefined,
                },
            };
        }
        if (preferenceType === 'number') {
            const minimum = await cli_lib_1.askForNumber('Optional minimum value.');
            const maximum = await cli_lib_1.askForNumber('Optional maximum value.', minimum);
            const defaultValue = await cli_lib_1.askForNumber('Optional default value.', minimum, maximum);
            return {
                ...base, preferenceType,
                definition: {
                    minimum: minimum !== null && minimum !== void 0 ? minimum : undefined,
                    maximum: maximum !== null && maximum !== void 0 ? maximum : undefined,
                    default: defaultValue !== null && defaultValue !== void 0 ? defaultValue : undefined,
                },
            };
        }
        if (preferenceType === 'boolean') {
            const defaultValue = (await inquirer_1.default.prompt({
                type: 'list',
                name: 'defaultValue',
                message: 'Choose a default value.',
                choices: [{ name: 'none', value: undefined },
                    { name: 'true', value: true },
                    { name: 'false', value: false }],
            })).defaultValue;
            return {
                ...base, preferenceType,
                definition: {
                    default: defaultValue !== null && defaultValue !== void 0 ? defaultValue : undefined,
                },
            };
        }
        if (preferenceType === 'string') {
            const minLength = await cli_lib_1.askForInteger('Optional minimum length.');
            const maxLength = await cli_lib_1.askForInteger('Optional maximum length.', minLength);
            const stringType = (await inquirer_1.default.prompt({
                type: 'list',
                name: 'stringType',
                message: 'Choose a type of string.',
                choices: ['text', 'password', 'paragraph'],
                default: 'text',
            })).stringType;
            const defaultValue = await cli_lib_1.askForString('Optional default value.', input => {
                if (minLength !== undefined && input.length < minLength) {
                    return `default must be no less than minLength (${minLength}) characters`;
                }
                if (maxLength !== undefined && input.length > maxLength) {
                    return `default must be no more than maxLength (${maxLength}) characters`;
                }
                return true;
            });
            return {
                ...base, preferenceType,
                definition: {
                    minLength: minLength !== null && minLength !== void 0 ? minLength : undefined,
                    maxLength: maxLength !== null && maxLength !== void 0 ? maxLength : undefined,
                    stringType,
                    default: defaultValue !== null && defaultValue !== void 0 ? defaultValue : undefined,
                },
            };
        }
        if (preferenceType === 'enumeration') {
            const firstName = await cli_lib_1.askForRequiredString('Enter a name for the first option.');
            let value = await cli_lib_1.askForRequiredString('Enter a value for the first option.');
            const options = { [firstName]: value };
            let name;
            do {
                name = await cli_lib_1.askForString('Enter a name for the next option or press enter to continue.');
                if (name) {
                    value = await cli_lib_1.askForRequiredString('Enter a value for the option.');
                    options[name] = value;
                }
            } while (name);
            const defaultValue = (await inquirer_1.default.prompt({
                type: 'list',
                name: 'defaultValue',
                message: 'Choose a default value.',
                choices: [
                    { name: 'none', value: undefined },
                    ...Object.entries(options).map(([name, value]) => ({ name: `${value} (${name})`, value: name }))
                ],
                default: undefined,
            })).defaultValue;
            return {
                ...base, preferenceType, definition: {
                    options,
                    default: defaultValue,
                },
            };
        }
        throw Error(`invalid preference type ${preferenceType}`);
    }
}
exports.default = DevicePreferencesCreateCommand;
DevicePreferencesCreateCommand.description = 'create a device preference';
DevicePreferencesCreateCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.inputAndOutputItem.flags,
};
DevicePreferencesCreateCommand.aliases = ['device-preferences:create'];
DevicePreferencesCreateCommand.examples = [
    '$ smartthings devicepreferences:create                              # create a new device profile by answering questions',
    '$ smartthings devicepreferences:create -d                           # generate a device profile by answering questions but do not actually create it',
    '$ smartthings devicepreferences:create -i dp.json                   # create a new device profile defined by the file dp.json',
    '$ smartthings devicepreferences:create -i dp.json -o dp-saved.json  # create a new device profile defined by the file dp.json and write the results to dp-saved.json',
];
