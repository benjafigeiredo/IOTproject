"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.augmentPresentationValues = exports.prunePresentationValues = exports.buildTableOutput = void 0;
const cli_lib_1 = require("@smartthings/cli-lib");
const deviceprofiles_1 = require("../deviceprofiles");
function entryValues(entries) {
    return entries.map(entry => entry.component ? `${entry.component}/${entry.capability}` : `${entry.capability}`).join('\n');
}
function buildTableOutput(tableGenerator, data) {
    return deviceprofiles_1.buildTableOutput(tableGenerator, data, table => {
        if (data.view) {
            if (data.view.dashboard) {
                if (data.view.dashboard.states) {
                    table.push(['Dashboard states', entryValues(data.view.dashboard.states)]);
                }
                if (data.view.dashboard.actions) {
                    table.push(['Dashboard actions', entryValues(data.view.dashboard.actions)]);
                }
            }
            if (data.view.detailView) {
                table.push(['Detail view', entryValues(data.view.detailView)]);
            }
            if (data.view.automation) {
                if (data.view.automation.conditions) {
                    table.push(['Automation conditions', entryValues(data.view.automation.conditions)]);
                }
                if (data.view.automation.actions) {
                    table.push(['Automation actions', entryValues(data.view.automation.actions)]);
                }
            }
        }
    });
}
exports.buildTableOutput = buildTableOutput;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function prunePresentation(view) {
    delete view.manufacturerName;
    delete view.presentationId;
    delete view.type;
    if (view.dpInfo === null) {
        delete view.dpInfo;
    }
    if (view.iconUrl === null) {
        delete view.iconUrl;
    }
}
function prunePresentationEntries(entries) {
    if (entries) {
        const mcd = entries.find(it => it.component !== 'main');
        for (const entry of entries) {
            if (entry.version === 1) {
                delete entry.version;
            }
            if (entry.values && entry.values.length === 0) {
                delete entry.values;
            }
            if (!entry.visibleCondition) {
                delete entry.visibleCondition;
            }
            if (!mcd) {
                // TODO: I'm guessing component should be optional in PresentationDeviceConfigEntry
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                delete entry.component;
            }
        }
    }
}
function prunePresentationValues(view) {
    var _a, _b, _c, _d;
    prunePresentation(view);
    prunePresentationEntries((_a = view.dashboard) === null || _a === void 0 ? void 0 : _a.states);
    prunePresentationEntries((_b = view.dashboard) === null || _b === void 0 ? void 0 : _b.actions);
    prunePresentationEntries(view.detailView);
    prunePresentationEntries((_c = view.automation) === null || _c === void 0 ? void 0 : _c.conditions);
    prunePresentationEntries((_d = view.automation) === null || _d === void 0 ? void 0 : _d.actions);
    return view;
}
exports.prunePresentationValues = prunePresentationValues;
function augmentPresentationEntries(entries) {
    if (entries) {
        for (const entry of entries) {
            if (!entry.version) {
                entry.version = 1;
            }
            if (!entry.component) {
                entry.component = 'main';
            }
        }
    }
}
function augmentPresentationValues(view) {
    var _a, _b, _c, _d;
    augmentPresentationEntries((_a = view.dashboard) === null || _a === void 0 ? void 0 : _a.states);
    augmentPresentationEntries((_b = view.dashboard) === null || _b === void 0 ? void 0 : _b.actions);
    augmentPresentationEntries(view.detailView);
    augmentPresentationEntries((_c = view.automation) === null || _c === void 0 ? void 0 : _c.conditions);
    augmentPresentationEntries((_d = view.automation) === null || _d === void 0 ? void 0 : _d.actions);
    return view;
}
exports.augmentPresentationValues = augmentPresentationValues;
class DeviceProfilesViewCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DeviceProfilesViewCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'id',
            sortKeyName: 'name',
            buildTableOutput: data => buildTableOutput(this.tableGenerator, data),
        };
        const getDeviceProfileAndConfig = async (id) => {
            const profile = await this.client.deviceProfiles.get(id);
            if (profile.metadata) {
                try {
                    const view = await this.client.presentation.get(profile.metadata.vid, profile.metadata.mnmn);
                    prunePresentationValues(view);
                    return { ...profile, view };
                }
                catch (error) {
                    this.logger.warn(error);
                    return profile;
                }
            }
            else {
                return profile;
            }
        };
        await cli_lib_1.outputListing(this, config, args.id, () => this.client.deviceProfiles.list(), getDeviceProfileAndConfig);
    }
}
exports.default = DeviceProfilesViewCommand;
DeviceProfilesViewCommand.description = 'show device profile and device configuration in a single, consolidated view';
DeviceProfilesViewCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
};
DeviceProfilesViewCommand.args = [{
        name: 'id',
        description: 'device profile UUID or the number from list',
    }];
DeviceProfilesViewCommand.aliases = ['device-profiles:view'];
