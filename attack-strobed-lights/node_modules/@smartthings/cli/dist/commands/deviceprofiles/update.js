"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupRequest = exports.buildTableOutput = void 0;
const errors_1 = require("@oclif/errors");
const cli_lib_1 = require("@smartthings/cli-lib");
const deviceprofiles_1 = require("../deviceprofiles");
function buildTableOutput(tableGenerator, data) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const table = tableGenerator.newOutputTable();
    table.push(['Name', data.name]);
    for (const comp of data.components) {
        table.push([`${comp.id} component`, comp.capabilities ? comp.capabilities.map(it => it.id).join('\n') : '']);
    }
    table.push(['Id', data.id]);
    table.push(['Device Type', (_b = (_a = data.metadata) === null || _a === void 0 ? void 0 : _a.deviceType) !== null && _b !== void 0 ? _b : '']);
    table.push(['OCF Device Type', (_d = (_c = data.metadata) === null || _c === void 0 ? void 0 : _c.ocfDeviceType) !== null && _d !== void 0 ? _d : '']);
    table.push(['Manufacturer Name', (_f = (_e = data.metadata) === null || _e === void 0 ? void 0 : _e.mnmn) !== null && _f !== void 0 ? _f : '']);
    table.push(['Presentation ID', (_h = (_g = data.metadata) === null || _g === void 0 ? void 0 : _g.vid) !== null && _h !== void 0 ? _h : '']);
    table.push(['Status', data.status]);
    return table.toString();
}
exports.buildTableOutput = buildTableOutput;
class DeviceProfileUpdateCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DeviceProfileUpdateCommand);
        await super.setup(args, argv, flags);
        const id = await deviceprofiles_1.chooseDeviceProfile(this, args.id);
        const executeUpdate = async (_, data) => {
            if (data.view) {
                throw new errors_1.CLIError('Input contains "view" property. Use deviceprofiles:view:update instead.');
            }
            return this.client.deviceProfiles.update(id, cleanupRequest(data));
        };
        await cli_lib_1.inputAndOutputItem(this, { buildTableOutput: data => buildTableOutput(this.tableGenerator, data) }, executeUpdate);
    }
}
exports.default = DeviceProfileUpdateCommand;
DeviceProfileUpdateCommand.description = 'update a device profile';
DeviceProfileUpdateCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.inputAndOutputItem.flags,
};
DeviceProfileUpdateCommand.args = [{
        name: 'id',
        description: 'device profile UUID or number in the list',
    }];
DeviceProfileUpdateCommand.aliases = ['device-profiles:update'];
// Cleanup is done so that the result of a device profile get can be modified and
// used in an update operation without having to delete the status, owner, and
// component name fields, which aren't accepted in the update API call.
function cleanupRequest(deviceProfileRequest) {
    delete deviceProfileRequest.id;
    delete deviceProfileRequest.status;
    delete deviceProfileRequest.name;
    if (deviceProfileRequest.components) {
        for (const component of deviceProfileRequest.components) {
            delete component.label;
        }
    }
    delete deviceProfileRequest.restrictions;
    return deviceProfileRequest;
}
exports.cleanupRequest = cleanupRequest;
