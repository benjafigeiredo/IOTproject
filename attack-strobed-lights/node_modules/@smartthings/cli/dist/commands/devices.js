"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseDevice = exports.buildTableOutput = void 0;
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
function buildTableOutput(tableGenerator, data) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    const table = tableGenerator.newOutputTable();
    table.push(['Name', data.name]);
    table.push(['Id', data.deviceId]);
    table.push(['Label', data.label]);
    table.push(['Manufacturer Code', (_a = data.deviceManufacturerCode) !== null && _a !== void 0 ? _a : '']);
    table.push(['Location Id', (_b = data.locationId) !== null && _b !== void 0 ? _b : '']);
    table.push(['Room Id', (_c = data.roomId) !== null && _c !== void 0 ? _c : '']);
    table.push(['Device Type Id', (_d = data.deviceTypeId) !== null && _d !== void 0 ? _d : '']);
    for (const comp of (_e = data.components) !== null && _e !== void 0 ? _e : []) {
        table.push([`${comp.id} component`, comp.capabilities ? comp.capabilities.map(it => it.id).join('\n') : '']);
    }
    table.push(['Child Devices', data.childDevices ? data.childDevices.map(it => it.deviceId).join('\n') : '']);
    table.push(['Profile Id', (_f = data.profileId) !== null && _f !== void 0 ? _f : ((_h = (_g = data.profile) === null || _g === void 0 ? void 0 : _g.id) !== null && _h !== void 0 ? _h : '')]);
    table.push(['Installed App Id', (_k = (_j = data.app) === null || _j === void 0 ? void 0 : _j.installedAppId) !== null && _k !== void 0 ? _k : '']);
    table.push(['External App Id', (_m = (_l = data.app) === null || _l === void 0 ? void 0 : _l.externalId) !== null && _m !== void 0 ? _m : '']);
    table.push(['App Profile Id', (_p = (_o = data.app) === null || _o === void 0 ? void 0 : _o.profileId) !== null && _p !== void 0 ? _p : '']);
    return table.toString();
}
exports.buildTableOutput = buildTableOutput;
async function chooseDevice(command, deviceFromArg, options) {
    const opts = cli_lib_1.chooseOptionsWithDefaults(options);
    const config = {
        itemName: 'device',
        primaryKeyName: 'deviceId',
        sortKeyName: 'label',
        listTableFieldDefinitions: ['label', 'name', 'type', 'deviceId'],
    };
    const listDevices = () => command.client.devices.list();
    const preselectedDeviceId = opts.allowIndex
        ? await cli_lib_1.stringTranslateToId(config, deviceFromArg, listDevices)
        : deviceFromArg;
    return cli_lib_1.selectFromList(command, config, preselectedDeviceId, listDevices);
}
exports.chooseDevice = chooseDevice;
class DevicesCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DevicesCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'deviceId',
            sortKeyName: 'label',
            listTableFieldDefinitions: ['label', 'name', 'type', 'deviceId'],
            buildTableOutput: (data) => buildTableOutput(this.tableGenerator, data),
        };
        if (this.flags.verbose) {
            config.listTableFieldDefinitions.splice(3, 0, 'location', 'room');
        }
        const deviceListOptions = {
            capability: flags.capability,
            capabilitiesMode: flags['capabilities-mode'] === 'or' ? 'or' : 'and',
            locationId: flags['location-id'],
            deviceId: flags['device-id'],
            installedAppId: flags['installed-app-id'],
        };
        await cli_lib_1.outputListing(this, config, args.id, async () => {
            const devices = await this.client.devices.list(deviceListOptions);
            if (flags.verbose) {
                return await cli_lib_1.withLocationsAndRooms(this.client, devices);
            }
            return devices;
        }, id => this.client.devices.get(id));
    }
}
exports.default = DevicesCommand;
DevicesCommand.description = 'list all devices available in a user account or retrieve a single device';
DevicesCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'filter results by location',
        multiple: true,
    }),
    capability: command_1.flags.string({
        char: 'c',
        description: 'filter results by capability',
        multiple: true,
    }),
    'capabilities-mode': command_1.flags.string({
        char: 'C',
        description: 'Treat capability filter query params as a logical "or" or "and" with a default of "and".',
        dependsOn: ['capability'],
        options: ['and', 'or'],
    }),
    'device-id': command_1.flags.string({
        char: 'd',
        description: 'filter results by device',
        multiple: true,
    }),
    'installed-app-id': command_1.flags.string({
        char: 'a',
        description: 'filter results by installed app that created the device',
    }),
    verbose: command_1.flags.boolean({
        description: 'include location name in output',
        char: 'v',
    }),
};
DevicesCommand.args = [{
        name: 'id',
        description: 'device to retrieve; UUID or the number of the device from list',
    }];
