"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRule = exports.getRulesByLocation = exports.tableFieldDefinitions = void 0;
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const cli_lib_1 = require("@smartthings/cli-lib");
exports.tableFieldDefinitions = ['name', 'id',
    { label: 'Num Actions', value: rule => rule.actions.length.toString() },
    'timeZoneId'];
async function getRulesByLocation(client, locationId) {
    var _a;
    let locations = [];
    if (locationId) {
        locations = [await client.locations.get(locationId)];
    }
    else {
        locations = await client.locations.list();
    }
    if (!locations || locations.length == 0) {
        throw Error('could not find any locations for your account. Perhaps ' +
            "you haven't created any locations yet.");
    }
    let rules = [];
    for (const location of locations) {
        const locationRules = (_a = await client.rules.list(location.locationId)) !== null && _a !== void 0 ? _a : [];
        rules = rules.concat(locationRules.map(rule => { return { ...rule, locationId: location.locationId, locationName: location.name }; }));
    }
    return rules;
}
exports.getRulesByLocation = getRulesByLocation;
async function getRule(client, id, locationId) {
    if (locationId) {
        return client.rules.get(id, locationId);
    }
    const allRules = await getRulesByLocation(client, locationId);
    const rule = allRules.find(rule => rule.id === id);
    if (!rule) {
        throw new errors_1.CLIError(`could not find rule with id ${id}` + locationId ? ` in location ${locationId}` : '');
    }
    return rule;
}
exports.getRule = getRule;
class RulesCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(RulesCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'id',
            sortKeyName: 'name',
            listTableFieldDefinitions: ['name', 'id', 'locationId', 'locationName'],
            tableFieldDefinitions: exports.tableFieldDefinitions,
        };
        await cli_lib_1.outputListing(this, config, args.idOrIndex, () => getRulesByLocation(this.client, flags['location-id']), id => getRule(this.client, id, flags['location-id']));
    }
}
exports.default = RulesCommand;
RulesCommand.description = 'get a specific rule';
RulesCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.outputListing.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'a specific location to query',
    }),
};
RulesCommand.args = [{
        name: 'idOrIndex',
        description: 'rule UUID or index',
    }];
