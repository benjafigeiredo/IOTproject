"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const aws_utils_1 = require("../../lib/aws-utils");
const common_flags_1 = require("../../lib/common-flags");
const authorize_1 = require("./authorize");
class SchemaAppCreateCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(SchemaAppCreateCommand);
        await super.setup(args, argv, flags);
        const createApp = async (_, data) => {
            var _a;
            if (flags.authorize) {
                if (data.hostingType === 'lambda') {
                    const principal = (_a = flags.principal) !== null && _a !== void 0 ? _a : authorize_1.SCHEMA_AWS_PRINCIPAL;
                    const statementId = flags['statement-id'];
                    if (data.lambdaArn) {
                        await aws_utils_1.addSchemaPermission(data.lambdaArn, principal, statementId);
                    }
                    if (data.lambdaArnAP) {
                        await aws_utils_1.addSchemaPermission(data.lambdaArnAP, principal, statementId);
                    }
                    if (data.lambdaArnCN) {
                        await aws_utils_1.addSchemaPermission(data.lambdaArnCN, principal, statementId);
                    }
                    if (data.lambdaArnEU) {
                        await aws_utils_1.addSchemaPermission(data.lambdaArnEU, principal, statementId);
                    }
                }
                else {
                    this.logger.error('Authorization is not applicable to WebHook schema connectors');
                    // eslint-disable-next-line no-process-exit
                    process.exit(1);
                }
            }
            return this.client.schema.create(data);
        };
        await cli_lib_1.inputAndOutputItem(this, { tableFieldDefinitions: ['endpointAppId', 'stClientId', 'stClientSecret'] }, createApp);
    }
}
exports.default = SchemaAppCreateCommand;
SchemaAppCreateCommand.description = 'create an ST Schema connector';
SchemaAppCreateCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.inputAndOutputItem.flags,
    authorize: command_1.flags.boolean({
        description: 'authorize connector\'s Lambda functions to be called by SmartThings',
    }),
    ...common_flags_1.lambdaAuthFlags,
};
