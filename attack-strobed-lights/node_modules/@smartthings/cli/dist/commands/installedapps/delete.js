"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
class InstalledAppDeleteCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(InstalledAppDeleteCommand);
        await super.setup(args, argv, flags);
        const config = {
            primaryKeyName: 'installedAppId',
            sortKeyName: 'displayName',
            listTableFieldDefinitions: ['displayName', 'installedAppType', 'installedAppStatus', 'installedAppId'],
        };
        if (flags.verbose) {
            config.listTableFieldDefinitions.splice(3, 0, 'location');
        }
        const listOptions = {
            locationId: flags['location-id'],
        };
        const id = await cli_lib_1.selectFromList(this, config, args.id, async () => {
            const apps = await this.client.installedApps.list(listOptions);
            if (this.flags.verbose) {
                return await cli_lib_1.withLocations(this.client, apps);
            }
            return apps;
        }, 'Select an installed app to delete.');
        await this.client.installedApps.delete(id),
            this.log(`Installed app ${id} deleted.`);
    }
}
exports.default = InstalledAppDeleteCommand;
InstalledAppDeleteCommand.description = 'delete the installed app instance';
InstalledAppDeleteCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    'location-id': command_1.flags.string({
        char: 'l',
        description: 'filter results by location',
        multiple: true,
    }),
    verbose: command_1.flags.boolean({
        description: 'include location name in output',
        char: 'v',
    }),
};
InstalledAppDeleteCommand.args = [{
        name: 'id',
        description: 'installed app UUID',
    }];
