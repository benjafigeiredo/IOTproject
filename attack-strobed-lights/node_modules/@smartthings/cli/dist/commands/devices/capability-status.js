"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTableOutput = void 0;
const errors_1 = require("@oclif/errors");
const cli_lib_1 = require("@smartthings/cli-lib");
const component_status_1 = require("./component-status");
const status_1 = require("./status");
const devices_1 = require("../devices");
function buildTableOutput(tableGenerator, capability) {
    const table = tableGenerator.newOutputTable({ head: ['Attribute', 'Value'] });
    for (const attributeName of Object.keys(capability)) {
        const attribute = capability[attributeName];
        table.push([
            attributeName,
            attribute.value !== null ?
                `${status_1.prettyPrintAttribute(attribute.value)}${attribute.unit ? ' ' + attribute.unit : ''}` : ''
        ]);
    }
    return table.toString();
}
exports.buildTableOutput = buildTableOutput;
class DeviceCapabilityStatusCommand extends cli_lib_1.APICommand {
    async run() {
        var _a;
        const { args, argv, flags } = this.parse(DeviceCapabilityStatusCommand);
        await super.setup(args, argv, flags);
        const deviceId = await devices_1.chooseDevice(this, args.id, { allowIndex: true });
        const device = await this.client.devices.get(deviceId);
        const componentName = await component_status_1.chooseComponent(this, args.component, device.components);
        const component = (_a = device.components) === null || _a === void 0 ? void 0 : _a.find(it => it.id === componentName);
        const capabilities = component === null || component === void 0 ? void 0 : component.capabilities;
        if (!capabilities) {
            throw new errors_1.CLIError(`no capabilities found for component ${componentName} of device ${deviceId}`);
        }
        const config = {
            itemName: 'capability',
            primaryKeyName: 'id',
            sortKeyName: 'id',
            listTableFieldDefinitions: ['id'],
        };
        const listCapabilities = async () => capabilities;
        const preselectedCapabilityId = await cli_lib_1.stringTranslateToId(config, args.capability, listCapabilities);
        const capabilityId = await cli_lib_1.selectFromList(this, config, preselectedCapabilityId, listCapabilities);
        const capabilityStatus = await this.client.devices.getCapabilityStatus(deviceId, componentName, capabilityId);
        await cli_lib_1.formatAndWriteItem(this, { buildTableOutput: data => buildTableOutput(this.tableGenerator, data) }, capabilityStatus);
    }
}
exports.default = DeviceCapabilityStatusCommand;
DeviceCapabilityStatusCommand.description = "get the current status of all of a device capability's attributes";
DeviceCapabilityStatusCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.formatAndWriteItem.flags,
};
DeviceCapabilityStatusCommand.args = [
    {
        name: 'id',
        description: 'the device id',
    },
    {
        name: 'component',
        description: 'the component id',
    },
    {
        name: 'capability',
        description: 'the capability id',
    },
];
