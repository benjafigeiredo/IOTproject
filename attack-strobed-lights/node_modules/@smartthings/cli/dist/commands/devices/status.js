"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTableOutput = exports.prettyPrintAttribute = void 0;
const cli_lib_1 = require("@smartthings/cli-lib");
const devices_1 = require("../devices");
function prettyPrintAttribute(value) {
    let result = JSON.stringify(value);
    if (result.length > 50) {
        result = JSON.stringify(value, null, 2);
    }
    return result;
}
exports.prettyPrintAttribute = prettyPrintAttribute;
function buildTableOutput(tableGenerator, data) {
    let output = '';
    if (data.components) {
        const componentIds = Object.keys(data.components);
        for (const componentId of componentIds) {
            const table = tableGenerator.newOutputTable({ head: ['Capability', 'Attribute', 'Value'] });
            if (componentIds.length > 1) {
                output += `\n${componentId} component\n`;
            }
            const component = data.components[componentId];
            for (const capabilityName of Object.keys(component)) {
                const capability = component[capabilityName];
                for (const attributeName of Object.keys(capability)) {
                    const attribute = capability[attributeName];
                    table.push([
                        capabilityName,
                        attributeName,
                        attribute.value !== null ?
                            `${prettyPrintAttribute(attribute.value)}${attribute.unit ? ' ' + attribute.unit : ''}` : ''
                    ]);
                }
            }
            output += table.toString();
            output += '\n';
        }
    }
    return output;
}
exports.buildTableOutput = buildTableOutput;
class DeviceStatusCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(DeviceStatusCommand);
        await super.setup(args, argv, flags);
        const deviceId = await devices_1.chooseDevice(this, args.id, { allowIndex: true });
        const presentation = await this.client.devices.getStatus(deviceId);
        await cli_lib_1.formatAndWriteItem(this, { buildTableOutput: data => buildTableOutput(this.tableGenerator, data) }, presentation);
    }
}
exports.default = DeviceStatusCommand;
DeviceStatusCommand.description = "get the current status of all of a device's component's attributes";
DeviceStatusCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.formatAndWriteItem.flags,
};
DeviceStatusCommand.args = [{
        name: 'id',
        description: 'the device id',
    }];
