import { Command, Component, CapabilityReference, Device } from '@smartthings/core-sdk';
import { APICommand } from '@smartthings/cli-lib';
export declare function parseArguments(str: string): (Record<string, unknown> | string | number)[];
export declare function parseDeviceCommand(str: string, componentId?: string, capabilityId?: string): Command;
export default class DeviceCommandsCommand extends APICommand {
    static description: string;
    static flags: {
        input: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        indent: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        json: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        yaml: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        token: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        language: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        profile: import("@oclif/command/lib/flags").IOptionFlag<string>;
    };
    static args: {
        name: string;
        description: string;
    }[];
    hasCommandLineInput(): boolean;
    getInputFromCommandLine(): Promise<Command[]>;
    protected getComponentFromUser(device: Device, cmd: Command): Promise<Command>;
    protected getCapabilityFromUser(component: Component, cmd: Command): Promise<Command>;
    protected getCommandFromUser(cap: CapabilityReference, cmd: Command): Promise<Command>;
    getInputFromUser(deviceId: string): Promise<Command[]>;
    run(): Promise<void>;
}
