"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_lib_1 = require("@smartthings/cli-lib");
const apps_1 = require("../apps");
const aws_utils_1 = require("../../lib/aws-utils");
const common_flags_1 = require("../../lib/common-flags");
const errors_1 = require("@oclif/errors");
class AppCreateCommand extends cli_lib_1.APICommand {
    async run() {
        const { args, argv, flags } = this.parse(AppCreateCommand);
        await super.setup(args, argv, flags);
        const createApp = async (_, data) => {
            if (flags.authorize) {
                if (data.lambdaSmartApp) {
                    if (data.lambdaSmartApp.functions) {
                        const requests = data.lambdaSmartApp.functions.map((it) => {
                            return aws_utils_1.addPermission(it, flags.principal, flags['statement-id']);
                        });
                        await Promise.all(requests);
                    }
                }
                else {
                    throw new errors_1.CLIError('Authorization is not applicable to WebHook SmartApps');
                }
            }
            return this.client.apps.create(data);
        };
        await cli_lib_1.inputAndOutputItem(this, { buildTableOutput: data => this.tableGenerator.buildTableFromItem(data.app, apps_1.tableFieldDefinitions) }, createApp);
    }
}
exports.default = AppCreateCommand;
AppCreateCommand.description = 'update the OAuth settings of the app';
AppCreateCommand.flags = {
    ...cli_lib_1.APICommand.flags,
    ...cli_lib_1.inputAndOutputItem.flags,
    authorize: command_1.flags.boolean({
        description: 'authorize Lambda functions to be called by SmartThings',
    }),
    ...common_flags_1.lambdaAuthFlags,
};
